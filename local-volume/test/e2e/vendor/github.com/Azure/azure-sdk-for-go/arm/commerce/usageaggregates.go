package commerce

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"net/http"
)

// UsageAggregatesClient is the client for the UsageAggregates methods of the
// Commerce service.
type UsageAggregatesClient struct {
	ManagementClient
}

// NewUsageAggregatesClient creates an instance of the UsageAggregatesClient
// client.
func NewUsageAggregatesClient(subscriptionID string) UsageAggregatesClient {
	return NewUsageAggregatesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewUsageAggregatesClientWithBaseURI creates an instance of the
// UsageAggregatesClient client.
func NewUsageAggregatesClientWithBaseURI(baseURI string, subscriptionID string) UsageAggregatesClient {
	return UsageAggregatesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// List query aggregated Azure subscription consumption data for a date range.
//
// reportedstartTime is the start of the time range to retrieve data for.
// reportedEndTime is the end of the time range to retrieve data for.
// showDetails is when set to true (default), the aggregates are broken down
// into the instance metadata which is more granular. aggregationGranularity
// is value is either daily (default) or hourly to tell the API how to return
// the results grouped by day or hour. Possible values include: 'Daily',
// 'Hourly' continuationToken is retrieved from previous calls, this is the
// bookmark used for progress when the responses are paged.
func (client UsageAggregatesClient) List(reportedstartTime date.Time, reportedEndTime date.Time, showDetails *bool, aggregationGranularity AggregationGranularity, continuationToken string) (result UsageAggregationListResult, err error) {
	req, err := client.ListPreparer(reportedstartTime, reportedEndTime, showDetails, aggregationGranularity, continuationToken)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", nil, "Failure preparing request")
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", resp, "Failure sending request")
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client UsageAggregatesClient) ListPreparer(reportedstartTime date.Time, reportedEndTime date.Time, showDetails *bool, aggregationGranularity AggregationGranularity, continuationToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	queryParameters := map[string]interface{}{
		"api-version":       client.APIVersion,
		"reportedEndTime":   autorest.Encode("query", reportedEndTime),
		"reportedstartTime": autorest.Encode("query", reportedstartTime),
	}
	if showDetails != nil {
		queryParameters["showDetails"] = autorest.Encode("query", *showDetails)
	}
	if len(string(aggregationGranularity)) > 0 {
		queryParameters["aggregationGranularity"] = autorest.Encode("query", aggregationGranularity)
	}
	if len(continuationToken) > 0 {
		queryParameters["continuationToken"] = autorest.Encode("query", continuationToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Commerce/UsageAggregates", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client UsageAggregatesClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client UsageAggregatesClient) ListResponder(resp *http.Response) (result UsageAggregationListResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListNextResults retrieves the next set of results, if any.
func (client UsageAggregatesClient) ListNextResults(lastResults UsageAggregationListResult) (result UsageAggregationListResult, err error) {
	req, err := lastResults.UsageAggregationListResultPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", resp, "Failure sending next results request")
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "commerce.UsageAggregatesClient", "List", resp, "Failure responding to next results request")
	}

	return
}
