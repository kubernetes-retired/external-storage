package logic

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// DayOfWeek enumerates the values for day of week.
type DayOfWeek string

const (
	// Friday specifies the friday state for day of week.
	Friday DayOfWeek = "Friday"
	// Monday specifies the monday state for day of week.
	Monday DayOfWeek = "Monday"
	// Saturday specifies the saturday state for day of week.
	Saturday DayOfWeek = "Saturday"
	// Sunday specifies the sunday state for day of week.
	Sunday DayOfWeek = "Sunday"
	// Thursday specifies the thursday state for day of week.
	Thursday DayOfWeek = "Thursday"
	// Tuesday specifies the tuesday state for day of week.
	Tuesday DayOfWeek = "Tuesday"
	// Wednesday specifies the wednesday state for day of week.
	Wednesday DayOfWeek = "Wednesday"
)

// DaysOfWeek enumerates the values for days of week.
type DaysOfWeek string

const (
	// DaysOfWeekFriday specifies the days of week friday state for days of
	// week.
	DaysOfWeekFriday DaysOfWeek = "Friday"
	// DaysOfWeekMonday specifies the days of week monday state for days of
	// week.
	DaysOfWeekMonday DaysOfWeek = "Monday"
	// DaysOfWeekSaturday specifies the days of week saturday state for days
	// of week.
	DaysOfWeekSaturday DaysOfWeek = "Saturday"
	// DaysOfWeekSunday specifies the days of week sunday state for days of
	// week.
	DaysOfWeekSunday DaysOfWeek = "Sunday"
	// DaysOfWeekThursday specifies the days of week thursday state for days
	// of week.
	DaysOfWeekThursday DaysOfWeek = "Thursday"
	// DaysOfWeekTuesday specifies the days of week tuesday state for days of
	// week.
	DaysOfWeekTuesday DaysOfWeek = "Tuesday"
	// DaysOfWeekWednesday specifies the days of week wednesday state for days
	// of week.
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
)

// KeyType enumerates the values for key type.
type KeyType string

const (
	// NotSpecified specifies the not specified state for key type.
	NotSpecified KeyType = "NotSpecified"
	// Primary specifies the primary state for key type.
	Primary KeyType = "Primary"
	// Secondary specifies the secondary state for key type.
	Secondary KeyType = "Secondary"
)

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// ParameterTypeArray specifies the parameter type array state for
	// parameter type.
	ParameterTypeArray ParameterType = "Array"
	// ParameterTypeBool specifies the parameter type bool state for parameter
	// type.
	ParameterTypeBool ParameterType = "Bool"
	// ParameterTypeFloat specifies the parameter type float state for
	// parameter type.
	ParameterTypeFloat ParameterType = "Float"
	// ParameterTypeInt specifies the parameter type int state for parameter
	// type.
	ParameterTypeInt ParameterType = "Int"
	// ParameterTypeNotSpecified specifies the parameter type not specified
	// state for parameter type.
	ParameterTypeNotSpecified ParameterType = "NotSpecified"
	// ParameterTypeObject specifies the parameter type object state for
	// parameter type.
	ParameterTypeObject ParameterType = "Object"
	// ParameterTypeSecureObject specifies the parameter type secure object
	// state for parameter type.
	ParameterTypeSecureObject ParameterType = "SecureObject"
	// ParameterTypeSecureString specifies the parameter type secure string
	// state for parameter type.
	ParameterTypeSecureString ParameterType = "SecureString"
	// ParameterTypeString specifies the parameter type string state for
	// parameter type.
	ParameterTypeString ParameterType = "String"
)

// RecurrenceFrequency enumerates the values for recurrence frequency.
type RecurrenceFrequency string

const (
	// RecurrenceFrequencyDay specifies the recurrence frequency day state for
	// recurrence frequency.
	RecurrenceFrequencyDay RecurrenceFrequency = "Day"
	// RecurrenceFrequencyHour specifies the recurrence frequency hour state
	// for recurrence frequency.
	RecurrenceFrequencyHour RecurrenceFrequency = "Hour"
	// RecurrenceFrequencyMinute specifies the recurrence frequency minute
	// state for recurrence frequency.
	RecurrenceFrequencyMinute RecurrenceFrequency = "Minute"
	// RecurrenceFrequencyMonth specifies the recurrence frequency month state
	// for recurrence frequency.
	RecurrenceFrequencyMonth RecurrenceFrequency = "Month"
	// RecurrenceFrequencyNotSpecified specifies the recurrence frequency not
	// specified state for recurrence frequency.
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	// RecurrenceFrequencySecond specifies the recurrence frequency second
	// state for recurrence frequency.
	RecurrenceFrequencySecond RecurrenceFrequency = "Second"
	// RecurrenceFrequencyWeek specifies the recurrence frequency week state
	// for recurrence frequency.
	RecurrenceFrequencyWeek RecurrenceFrequency = "Week"
	// RecurrenceFrequencyYear specifies the recurrence frequency year state
	// for recurrence frequency.
	RecurrenceFrequencyYear RecurrenceFrequency = "Year"
)

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// SkuNameBasic specifies the sku name basic state for sku name.
	SkuNameBasic SkuName = "Basic"
	// SkuNameFree specifies the sku name free state for sku name.
	SkuNameFree SkuName = "Free"
	// SkuNameNotSpecified specifies the sku name not specified state for sku
	// name.
	SkuNameNotSpecified SkuName = "NotSpecified"
	// SkuNamePremium specifies the sku name premium state for sku name.
	SkuNamePremium SkuName = "Premium"
	// SkuNameShared specifies the sku name shared state for sku name.
	SkuNameShared SkuName = "Shared"
	// SkuNameStandard specifies the sku name standard state for sku name.
	SkuNameStandard SkuName = "Standard"
)

// WorkflowProvisioningState enumerates the values for workflow provisioning
// state.
type WorkflowProvisioningState string

const (
	// WorkflowProvisioningStateAccepted specifies the workflow provisioning
	// state accepted state for workflow provisioning state.
	WorkflowProvisioningStateAccepted WorkflowProvisioningState = "Accepted"
	// WorkflowProvisioningStateCanceled specifies the workflow provisioning
	// state canceled state for workflow provisioning state.
	WorkflowProvisioningStateCanceled WorkflowProvisioningState = "Canceled"
	// WorkflowProvisioningStateCompleted specifies the workflow provisioning
	// state completed state for workflow provisioning state.
	WorkflowProvisioningStateCompleted WorkflowProvisioningState = "Completed"
	// WorkflowProvisioningStateCreated specifies the workflow provisioning
	// state created state for workflow provisioning state.
	WorkflowProvisioningStateCreated WorkflowProvisioningState = "Created"
	// WorkflowProvisioningStateCreating specifies the workflow provisioning
	// state creating state for workflow provisioning state.
	WorkflowProvisioningStateCreating WorkflowProvisioningState = "Creating"
	// WorkflowProvisioningStateDeleted specifies the workflow provisioning
	// state deleted state for workflow provisioning state.
	WorkflowProvisioningStateDeleted WorkflowProvisioningState = "Deleted"
	// WorkflowProvisioningStateDeleting specifies the workflow provisioning
	// state deleting state for workflow provisioning state.
	WorkflowProvisioningStateDeleting WorkflowProvisioningState = "Deleting"
	// WorkflowProvisioningStateFailed specifies the workflow provisioning
	// state failed state for workflow provisioning state.
	WorkflowProvisioningStateFailed WorkflowProvisioningState = "Failed"
	// WorkflowProvisioningStateMoving specifies the workflow provisioning
	// state moving state for workflow provisioning state.
	WorkflowProvisioningStateMoving WorkflowProvisioningState = "Moving"
	// WorkflowProvisioningStateNotSpecified specifies the workflow
	// provisioning state not specified state for workflow provisioning state.
	WorkflowProvisioningStateNotSpecified WorkflowProvisioningState = "NotSpecified"
	// WorkflowProvisioningStateReady specifies the workflow provisioning
	// state ready state for workflow provisioning state.
	WorkflowProvisioningStateReady WorkflowProvisioningState = "Ready"
	// WorkflowProvisioningStateRegistered specifies the workflow provisioning
	// state registered state for workflow provisioning state.
	WorkflowProvisioningStateRegistered WorkflowProvisioningState = "Registered"
	// WorkflowProvisioningStateRegistering specifies the workflow
	// provisioning state registering state for workflow provisioning state.
	WorkflowProvisioningStateRegistering WorkflowProvisioningState = "Registering"
	// WorkflowProvisioningStateRunning specifies the workflow provisioning
	// state running state for workflow provisioning state.
	WorkflowProvisioningStateRunning WorkflowProvisioningState = "Running"
	// WorkflowProvisioningStateSucceeded specifies the workflow provisioning
	// state succeeded state for workflow provisioning state.
	WorkflowProvisioningStateSucceeded WorkflowProvisioningState = "Succeeded"
	// WorkflowProvisioningStateUnregistered specifies the workflow
	// provisioning state unregistered state for workflow provisioning state.
	WorkflowProvisioningStateUnregistered WorkflowProvisioningState = "Unregistered"
	// WorkflowProvisioningStateUnregistering specifies the workflow
	// provisioning state unregistering state for workflow provisioning state.
	WorkflowProvisioningStateUnregistering WorkflowProvisioningState = "Unregistering"
	// WorkflowProvisioningStateUpdating specifies the workflow provisioning
	// state updating state for workflow provisioning state.
	WorkflowProvisioningStateUpdating WorkflowProvisioningState = "Updating"
)

// WorkflowState enumerates the values for workflow state.
type WorkflowState string

const (
	// WorkflowStateCompleted specifies the workflow state completed state for
	// workflow state.
	WorkflowStateCompleted WorkflowState = "Completed"
	// WorkflowStateDeleted specifies the workflow state deleted state for
	// workflow state.
	WorkflowStateDeleted WorkflowState = "Deleted"
	// WorkflowStateDisabled specifies the workflow state disabled state for
	// workflow state.
	WorkflowStateDisabled WorkflowState = "Disabled"
	// WorkflowStateEnabled specifies the workflow state enabled state for
	// workflow state.
	WorkflowStateEnabled WorkflowState = "Enabled"
	// WorkflowStateNotSpecified specifies the workflow state not specified
	// state for workflow state.
	WorkflowStateNotSpecified WorkflowState = "NotSpecified"
	// WorkflowStateSuspended specifies the workflow state suspended state for
	// workflow state.
	WorkflowStateSuspended WorkflowState = "Suspended"
)

// WorkflowStatus enumerates the values for workflow status.
type WorkflowStatus string

const (
	// WorkflowStatusAborted specifies the workflow status aborted state for
	// workflow status.
	WorkflowStatusAborted WorkflowStatus = "Aborted"
	// WorkflowStatusCancelled specifies the workflow status cancelled state
	// for workflow status.
	WorkflowStatusCancelled WorkflowStatus = "Cancelled"
	// WorkflowStatusFailed specifies the workflow status failed state for
	// workflow status.
	WorkflowStatusFailed WorkflowStatus = "Failed"
	// WorkflowStatusFaulted specifies the workflow status faulted state for
	// workflow status.
	WorkflowStatusFaulted WorkflowStatus = "Faulted"
	// WorkflowStatusIgnored specifies the workflow status ignored state for
	// workflow status.
	WorkflowStatusIgnored WorkflowStatus = "Ignored"
	// WorkflowStatusNotSpecified specifies the workflow status not specified
	// state for workflow status.
	WorkflowStatusNotSpecified WorkflowStatus = "NotSpecified"
	// WorkflowStatusPaused specifies the workflow status paused state for
	// workflow status.
	WorkflowStatusPaused WorkflowStatus = "Paused"
	// WorkflowStatusRunning specifies the workflow status running state for
	// workflow status.
	WorkflowStatusRunning WorkflowStatus = "Running"
	// WorkflowStatusSkipped specifies the workflow status skipped state for
	// workflow status.
	WorkflowStatusSkipped WorkflowStatus = "Skipped"
	// WorkflowStatusSucceeded specifies the workflow status succeeded state
	// for workflow status.
	WorkflowStatusSucceeded WorkflowStatus = "Succeeded"
	// WorkflowStatusSuspended specifies the workflow status suspended state
	// for workflow status.
	WorkflowStatusSuspended WorkflowStatus = "Suspended"
	// WorkflowStatusTimedOut specifies the workflow status timed out state
	// for workflow status.
	WorkflowStatusTimedOut WorkflowStatus = "TimedOut"
	// WorkflowStatusWaiting specifies the workflow status waiting state for
	// workflow status.
	WorkflowStatusWaiting WorkflowStatus = "Waiting"
)

// WorkflowTriggerProvisioningState enumerates the values for workflow trigger
// provisioning state.
type WorkflowTriggerProvisioningState string

const (
	// WorkflowTriggerProvisioningStateAccepted specifies the workflow trigger
	// provisioning state accepted state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateAccepted WorkflowTriggerProvisioningState = "Accepted"
	// WorkflowTriggerProvisioningStateCanceled specifies the workflow trigger
	// provisioning state canceled state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateCanceled WorkflowTriggerProvisioningState = "Canceled"
	// WorkflowTriggerProvisioningStateCompleted specifies the workflow
	// trigger provisioning state completed state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateCompleted WorkflowTriggerProvisioningState = "Completed"
	// WorkflowTriggerProvisioningStateCreated specifies the workflow trigger
	// provisioning state created state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateCreated WorkflowTriggerProvisioningState = "Created"
	// WorkflowTriggerProvisioningStateCreating specifies the workflow trigger
	// provisioning state creating state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateCreating WorkflowTriggerProvisioningState = "Creating"
	// WorkflowTriggerProvisioningStateDeleted specifies the workflow trigger
	// provisioning state deleted state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateDeleted WorkflowTriggerProvisioningState = "Deleted"
	// WorkflowTriggerProvisioningStateDeleting specifies the workflow trigger
	// provisioning state deleting state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateDeleting WorkflowTriggerProvisioningState = "Deleting"
	// WorkflowTriggerProvisioningStateFailed specifies the workflow trigger
	// provisioning state failed state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateFailed WorkflowTriggerProvisioningState = "Failed"
	// WorkflowTriggerProvisioningStateMoving specifies the workflow trigger
	// provisioning state moving state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateMoving WorkflowTriggerProvisioningState = "Moving"
	// WorkflowTriggerProvisioningStateNotSpecified specifies the workflow
	// trigger provisioning state not specified state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateNotSpecified WorkflowTriggerProvisioningState = "NotSpecified"
	// WorkflowTriggerProvisioningStateReady specifies the workflow trigger
	// provisioning state ready state for workflow trigger provisioning state.
	WorkflowTriggerProvisioningStateReady WorkflowTriggerProvisioningState = "Ready"
	// WorkflowTriggerProvisioningStateRegistered specifies the workflow
	// trigger provisioning state registered state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateRegistered WorkflowTriggerProvisioningState = "Registered"
	// WorkflowTriggerProvisioningStateRegistering specifies the workflow
	// trigger provisioning state registering state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateRegistering WorkflowTriggerProvisioningState = "Registering"
	// WorkflowTriggerProvisioningStateRunning specifies the workflow trigger
	// provisioning state running state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateRunning WorkflowTriggerProvisioningState = "Running"
	// WorkflowTriggerProvisioningStateSucceeded specifies the workflow
	// trigger provisioning state succeeded state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateSucceeded WorkflowTriggerProvisioningState = "Succeeded"
	// WorkflowTriggerProvisioningStateUnregistered specifies the workflow
	// trigger provisioning state unregistered state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateUnregistered WorkflowTriggerProvisioningState = "Unregistered"
	// WorkflowTriggerProvisioningStateUnregistering specifies the workflow
	// trigger provisioning state unregistering state for workflow trigger
	// provisioning state.
	WorkflowTriggerProvisioningStateUnregistering WorkflowTriggerProvisioningState = "Unregistering"
	// WorkflowTriggerProvisioningStateUpdating specifies the workflow trigger
	// provisioning state updating state for workflow trigger provisioning
	// state.
	WorkflowTriggerProvisioningStateUpdating WorkflowTriggerProvisioningState = "Updating"
)

// ContentHash is
type ContentHash struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Value     *string `json:"value,omitempty"`
}

// ContentLink is
type ContentLink struct {
	URI            *string                 `json:"uri,omitempty"`
	ContentVersion *string                 `json:"contentVersion,omitempty"`
	ContentSize    *int64                  `json:"contentSize,omitempty"`
	ContentHash    *ContentHash            `json:"contentHash,omitempty"`
	Metadata       *map[string]interface{} `json:"metadata,omitempty"`
}

// Correlation is
type Correlation struct {
	ClientTrackingID *string `json:"clientTrackingId,omitempty"`
}

// GenerateUpgradedDefinitionParameters is
type GenerateUpgradedDefinitionParameters struct {
	TargetSchemaVersion *string `json:"targetSchemaVersion,omitempty"`
}

// RecurrenceSchedule is
type RecurrenceSchedule struct {
	Minutes            *[]int32                        `json:"minutes,omitempty"`
	Hours              *[]int32                        `json:"hours,omitempty"`
	WeekDays           *[]DaysOfWeek                   `json:"weekDays,omitempty"`
	MonthDays          *[]int32                        `json:"monthDays,omitempty"`
	MonthlyOccurrences *[]RecurrenceScheduleOccurrence `json:"monthlyOccurrences,omitempty"`
}

// RecurrenceScheduleOccurrence is
type RecurrenceScheduleOccurrence struct {
	Day        DayOfWeek `json:"day,omitempty"`
	Occurrence *int32    `json:"occurrence,omitempty"`
}

// Resource is
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceReference is
type ResourceReference struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// SetObject is
type SetObject struct {
	autorest.Response `json:"-"`
	Value             *map[string]interface{} `json:"value,omitempty"`
}

// Sku is
type Sku struct {
	Name SkuName            `json:"name,omitempty"`
	Plan *ResourceReference `json:"plan,omitempty"`
}

// SubResource is
type SubResource struct {
	ID *string `json:"id,omitempty"`
}

// Workflow is
type Workflow struct {
	autorest.Response   `json:"-"`
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*WorkflowProperties `json:"properties,omitempty"`
}

// WorkflowFilter is
type WorkflowFilter struct {
	State WorkflowState `json:"state,omitempty"`
}

// WorkflowListResult is
type WorkflowListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Workflow `json:"value,omitempty"`
	NextLink          *string     `json:"nextLink,omitempty"`
}

// WorkflowListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowListResult) WorkflowListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowOutputParameter is
type WorkflowOutputParameter struct {
	Type        ParameterType           `json:"type,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Error       *map[string]interface{} `json:"error,omitempty"`
}

// WorkflowParameter is
type WorkflowParameter struct {
	Type        ParameterType           `json:"type,omitempty"`
	Value       *map[string]interface{} `json:"value,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Description *string                 `json:"description,omitempty"`
}

// WorkflowProperties is
type WorkflowProperties struct {
	ProvisioningState  WorkflowProvisioningState      `json:"provisioningState,omitempty"`
	CreatedTime        *date.Time                     `json:"createdTime,omitempty"`
	ChangedTime        *date.Time                     `json:"changedTime,omitempty"`
	State              WorkflowState                  `json:"state,omitempty"`
	Version            *string                        `json:"version,omitempty"`
	AccessEndpoint     *string                        `json:"accessEndpoint,omitempty"`
	Sku                *Sku                           `json:"sku,omitempty"`
	IntegrationAccount *ResourceReference             `json:"integrationAccount,omitempty"`
	Definition         *map[string]interface{}        `json:"definition,omitempty"`
	Parameters         *map[string]*WorkflowParameter `json:"parameters,omitempty"`
}

// WorkflowRun is
type WorkflowRun struct {
	autorest.Response      `json:"-"`
	ID                     *string `json:"id,omitempty"`
	*WorkflowRunProperties `json:"properties,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
}

// WorkflowRunAction is
type WorkflowRunAction struct {
	autorest.Response            `json:"-"`
	ID                           *string `json:"id,omitempty"`
	*WorkflowRunActionProperties `json:"properties,omitempty"`
	Name                         *string `json:"name,omitempty"`
	Type                         *string `json:"type,omitempty"`
}

// WorkflowRunActionFilter is
type WorkflowRunActionFilter struct {
	Status WorkflowStatus `json:"status,omitempty"`
}

// WorkflowRunActionListResult is
type WorkflowRunActionListResult struct {
	autorest.Response `json:"-"`
	Value             *[]WorkflowRunAction `json:"value,omitempty"`
	NextLink          *string              `json:"nextLink,omitempty"`
}

// WorkflowRunActionListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowRunActionListResult) WorkflowRunActionListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowRunActionProperties is
type WorkflowRunActionProperties struct {
	StartTime         *date.Time              `json:"startTime,omitempty"`
	EndTime           *date.Time              `json:"endTime,omitempty"`
	Status            WorkflowStatus          `json:"status,omitempty"`
	Code              *string                 `json:"code,omitempty"`
	Error             *map[string]interface{} `json:"error,omitempty"`
	TrackingID        *string                 `json:"trackingId,omitempty"`
	Correlation       *Correlation            `json:"correlation,omitempty"`
	InputsLink        *ContentLink            `json:"inputsLink,omitempty"`
	OutputsLink       *ContentLink            `json:"outputsLink,omitempty"`
	TrackedProperties *map[string]interface{} `json:"trackedProperties,omitempty"`
}

// WorkflowRunFilter is
type WorkflowRunFilter struct {
	Status WorkflowStatus `json:"status,omitempty"`
}

// WorkflowRunListResult is
type WorkflowRunListResult struct {
	autorest.Response `json:"-"`
	Value             *[]WorkflowRun `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// WorkflowRunListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowRunListResult) WorkflowRunListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowRunProperties is
type WorkflowRunProperties struct {
	StartTime     *date.Time                           `json:"startTime,omitempty"`
	EndTime       *date.Time                           `json:"endTime,omitempty"`
	Status        WorkflowStatus                       `json:"status,omitempty"`
	Code          *string                              `json:"code,omitempty"`
	Error         *map[string]interface{}              `json:"error,omitempty"`
	CorrelationID *string                              `json:"correlationId,omitempty"`
	Correlation   *Correlation                         `json:"correlation,omitempty"`
	Workflow      *ResourceReference                   `json:"workflow,omitempty"`
	Trigger       *WorkflowRunTrigger                  `json:"trigger,omitempty"`
	Outputs       *map[string]*WorkflowOutputParameter `json:"outputs,omitempty"`
	Response      *WorkflowRunTrigger                  `json:"response,omitempty"`
}

// WorkflowRunTrigger is
type WorkflowRunTrigger struct {
	Name              *string                 `json:"name,omitempty"`
	Inputs            *map[string]interface{} `json:"inputs,omitempty"`
	InputsLink        *ContentLink            `json:"inputsLink,omitempty"`
	Outputs           *map[string]interface{} `json:"outputs,omitempty"`
	OutputsLink       *ContentLink            `json:"outputsLink,omitempty"`
	StartTime         *date.Time              `json:"startTime,omitempty"`
	EndTime           *date.Time              `json:"endTime,omitempty"`
	TrackingID        *string                 `json:"trackingId,omitempty"`
	Correlation       *Correlation            `json:"correlation,omitempty"`
	Code              *string                 `json:"code,omitempty"`
	Status            WorkflowStatus          `json:"status,omitempty"`
	Error             *map[string]interface{} `json:"error,omitempty"`
	TrackedProperties *map[string]interface{} `json:"trackedProperties,omitempty"`
}

// WorkflowTrigger is
type WorkflowTrigger struct {
	autorest.Response          `json:"-"`
	ID                         *string `json:"id,omitempty"`
	*WorkflowTriggerProperties `json:"properties,omitempty"`
	Name                       *string `json:"name,omitempty"`
	Type                       *string `json:"type,omitempty"`
}

// WorkflowTriggerCallbackURL is
type WorkflowTriggerCallbackURL struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// WorkflowTriggerFilter is
type WorkflowTriggerFilter struct {
	State WorkflowState `json:"state,omitempty"`
}

// WorkflowTriggerHistory is
type WorkflowTriggerHistory struct {
	autorest.Response                 `json:"-"`
	ID                                *string `json:"id,omitempty"`
	*WorkflowTriggerHistoryProperties `json:"properties,omitempty"`
	Name                              *string `json:"name,omitempty"`
	Type                              *string `json:"type,omitempty"`
}

// WorkflowTriggerHistoryFilter is
type WorkflowTriggerHistoryFilter struct {
	Status WorkflowStatus `json:"status,omitempty"`
}

// WorkflowTriggerHistoryListResult is
type WorkflowTriggerHistoryListResult struct {
	autorest.Response `json:"-"`
	Value             *[]WorkflowTriggerHistory `json:"value,omitempty"`
	NextLink          *string                   `json:"nextLink,omitempty"`
}

// WorkflowTriggerHistoryListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowTriggerHistoryListResult) WorkflowTriggerHistoryListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowTriggerHistoryProperties is
type WorkflowTriggerHistoryProperties struct {
	StartTime   *date.Time              `json:"startTime,omitempty"`
	EndTime     *date.Time              `json:"endTime,omitempty"`
	Status      WorkflowStatus          `json:"status,omitempty"`
	Code        *string                 `json:"code,omitempty"`
	Error       *map[string]interface{} `json:"error,omitempty"`
	TrackingID  *string                 `json:"trackingId,omitempty"`
	Correlation *Correlation            `json:"correlation,omitempty"`
	InputsLink  *ContentLink            `json:"inputsLink,omitempty"`
	OutputsLink *ContentLink            `json:"outputsLink,omitempty"`
	Fired       *bool                   `json:"fired,omitempty"`
	Run         *ResourceReference      `json:"run,omitempty"`
}

// WorkflowTriggerListResult is
type WorkflowTriggerListResult struct {
	autorest.Response `json:"-"`
	Value             *[]WorkflowTrigger `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// WorkflowTriggerListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowTriggerListResult) WorkflowTriggerListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowTriggerProperties is
type WorkflowTriggerProperties struct {
	ProvisioningState WorkflowTriggerProvisioningState `json:"provisioningState,omitempty"`
	CreatedTime       *date.Time                       `json:"createdTime,omitempty"`
	ChangedTime       *date.Time                       `json:"changedTime,omitempty"`
	State             WorkflowState                    `json:"state,omitempty"`
	Status            WorkflowStatus                   `json:"status,omitempty"`
	LastExecutionTime *date.Time                       `json:"lastExecutionTime,omitempty"`
	NextExecutionTime *date.Time                       `json:"nextExecutionTime,omitempty"`
	Recurrence        *WorkflowTriggerRecurrence       `json:"recurrence,omitempty"`
	Workflow          *ResourceReference               `json:"workflow,omitempty"`
}

// WorkflowTriggerRecurrence is
type WorkflowTriggerRecurrence struct {
	Frequency RecurrenceFrequency `json:"frequency,omitempty"`
	Interval  *int32              `json:"interval,omitempty"`
	StartTime *date.Time          `json:"startTime,omitempty"`
	EndTime   *date.Time          `json:"endTime,omitempty"`
	TimeZone  *string             `json:"timeZone,omitempty"`
	Schedule  *RecurrenceSchedule `json:"schedule,omitempty"`
}

// WorkflowVersion is
type WorkflowVersion struct {
	autorest.Response          `json:"-"`
	ID                         *string             `json:"id,omitempty"`
	Name                       *string             `json:"name,omitempty"`
	Type                       *string             `json:"type,omitempty"`
	Location                   *string             `json:"location,omitempty"`
	Tags                       *map[string]*string `json:"tags,omitempty"`
	*WorkflowVersionProperties `json:"properties,omitempty"`
}

// WorkflowVersionListResult is
type WorkflowVersionListResult struct {
	autorest.Response `json:"-"`
	Value             *[]WorkflowVersion `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// WorkflowVersionListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WorkflowVersionListResult) WorkflowVersionListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// WorkflowVersionProperties is
type WorkflowVersionProperties struct {
	CreatedTime        *date.Time                     `json:"createdTime,omitempty"`
	ChangedTime        *date.Time                     `json:"changedTime,omitempty"`
	State              WorkflowState                  `json:"state,omitempty"`
	Version            *string                        `json:"version,omitempty"`
	AccessEndpoint     *string                        `json:"accessEndpoint,omitempty"`
	Sku                *Sku                           `json:"sku,omitempty"`
	IntegrationAccount *ResourceReference             `json:"integrationAccount,omitempty"`
	Definition         *map[string]interface{}        `json:"definition,omitempty"`
	Parameters         *map[string]*WorkflowParameter `json:"parameters,omitempty"`
}
