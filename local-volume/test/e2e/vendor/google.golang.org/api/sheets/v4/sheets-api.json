{
  "version_module": "True",
  "schemas": {
    "FindReplaceRequest": {
      "description": "Finds and replaces data in cells over a range, sheet, or all sheets.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "GridRange",
          "description": "The range to find/replace over."
        },
        "sheetId": {
          "description": "The sheet to find/replace over.",
          "format": "int32",
          "type": "integer"
        },
        "matchCase": {
          "description": "True if the search is case sensitive.",
          "type": "boolean"
        },
        "allSheets": {
          "description": "True to find/replace over all sheets.",
          "type": "boolean"
        },
        "includeFormulas": {
          "description": "True if the search should include cells with formulas.\nFalse to skip cells with formulas.",
          "type": "boolean"
        },
        "matchEntireCell": {
          "description": "True if the find value should match the entire cell.",
          "type": "boolean"
        },
        "find": {
          "description": "The value to search.",
          "type": "string"
        },
        "searchByRegex": {
          "description": "True if the find value is a regex.\nThe regular expression and replacement should follow Java regex rules\nat https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.\nThe replacement string is allowed to refer to capturing groups.\nFor example, if one cell has the contents `\"Google Sheets\"` and another\nhas `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of\n`\"$1 Rocks\"` would change the contents of the cells to\n`\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.",
          "type": "boolean"
        },
        "replacement": {
          "description": "The value to use as the replacement.",
          "type": "string"
        }
      },
      "id": "FindReplaceRequest"
    },
    "UpdateNamedRangeRequest": {
      "description": "Updates properties of the named range with the specified\nnamedRangeId.",
      "type": "object",
      "properties": {
        "namedRange": {
          "description": "The named range to update with the new properties.",
          "$ref": "NamedRange"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `namedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateNamedRangeRequest"
    },
    "AddSheetRequest": {
      "description": "Adds a new sheet.\nWhen a sheet is added at a given index,\nall subsequent sheets' indexes are incremented.\nTo add an object sheet, use AddChartRequest instead and specify\nEmbeddedObjectPosition.sheetId or\nEmbeddedObjectPosition.newSheet.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties the new sheet should have.\nAll properties are optional.\nThe sheetId field is optional; if one is not\nset, an id will be randomly generated. (It is an error to specify the ID\nof a sheet that already exists.)",
          "$ref": "SheetProperties"
        }
      },
      "id": "AddSheetRequest"
    },
    "UpdateCellsRequest": {
      "description": "Updates all cells in a range with new data.",
      "type": "object",
      "properties": {
        "start": {
          "description": "The coordinate to start writing data at.\nAny number of rows and columns (including a different number of\ncolumns per row) may be written.",
          "$ref": "GridCoordinate"
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range to write data to.\n\nIf the data in rows does not cover the entire requested range,\nthe fields matching those set in fields will be cleared."
        },
        "rows": {
          "description": "The data to write.",
          "type": "array",
          "items": {
            "$ref": "RowData"
          }
        },
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateCellsRequest"
    },
    "DeleteConditionalFormatRuleResponse": {
      "description": "The result of deleting a conditional format rule.",
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "ConditionalFormatRule",
          "description": "The rule that was deleted."
        }
      },
      "id": "DeleteConditionalFormatRuleResponse"
    },
    "DeleteRangeRequest": {
      "description": "Deletes a range of cells, shifting other cells into the deleted area.",
      "type": "object",
      "properties": {
        "shiftDimension": {
          "description": "The dimension from which deleted cells will be replaced with.\nIf ROWS, existing cells will be shifted upward to\nreplace the deleted cells. If COLUMNS, existing cells\nwill be shifted left to replace the deleted cells.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ]
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range of cells to delete."
        }
      },
      "id": "DeleteRangeRequest"
    },
    "GridCoordinate": {
      "description": "A coordinate in a sheet.\nAll indexes are zero-based.",
      "type": "object",
      "properties": {
        "rowIndex": {
          "description": "The row index of the coordinate.",
          "format": "int32",
          "type": "integer"
        },
        "columnIndex": {
          "description": "The column index of the coordinate.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet this coordinate is on.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "GridCoordinate"
    },
    "UpdateSheetPropertiesRequest": {
      "description": "Updates properties of the sheet with the specified\nsheetId.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties to update.",
          "$ref": "SheetProperties"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateSheetPropertiesRequest"
    },
    "GridProperties": {
      "description": "Properties of a grid.",
      "type": "object",
      "properties": {
        "rowCount": {
          "description": "The number of rows in the grid.",
          "format": "int32",
          "type": "integer"
        },
        "frozenRowCount": {
          "description": "The number of rows that are frozen in the grid.",
          "format": "int32",
          "type": "integer"
        },
        "hideGridlines": {
          "description": "True if the grid isn't showing gridlines in the UI.",
          "type": "boolean"
        },
        "columnCount": {
          "description": "The number of columns in the grid.",
          "format": "int32",
          "type": "integer"
        },
        "frozenColumnCount": {
          "description": "The number of columns that are frozen in the grid.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "GridProperties"
    },
    "UnmergeCellsRequest": {
      "description": "Unmerges cells in the given range.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range within which all cells should be unmerged.\nIf the range spans multiple merges, all will be unmerged.\nThe range must not partially span any merge.",
          "$ref": "GridRange"
        }
      },
      "id": "UnmergeCellsRequest"
    },
    "UpdateEmbeddedObjectPositionResponse": {
      "description": "The result of updating an embedded object's position.",
      "type": "object",
      "properties": {
        "position": {
          "description": "The new position of the embedded object.",
          "$ref": "EmbeddedObjectPosition"
        }
      },
      "id": "UpdateEmbeddedObjectPositionResponse"
    },
    "SortSpec": {
      "description": "A sort order associated with a specific column or row.",
      "type": "object",
      "properties": {
        "dimensionIndex": {
          "description": "The dimension the sort should be applied to.",
          "format": "int32",
          "type": "integer"
        },
        "sortOrder": {
          "enumDescriptions": [
            "Default value, do not use this.",
            "Sort ascending.",
            "Sort descending."
          ],
          "enum": [
            "SORT_ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "description": "The order data should be sorted.",
          "type": "string"
        }
      },
      "id": "SortSpec"
    },
    "Sheet": {
      "description": "A sheet in a spreadsheet.",
      "type": "object",
      "properties": {
        "basicFilter": {
          "description": "The filter on this sheet, if any.",
          "$ref": "BasicFilter"
        },
        "merges": {
          "description": "The ranges that are merged together.",
          "type": "array",
          "items": {
            "$ref": "GridRange"
          }
        },
        "data": {
          "description": "Data in the grid, if this is a grid sheet.\nThe number of GridData objects returned is dependent on the number of\nranges requested on this sheet. For example, if this is representing\n`Sheet1`, and the spreadsheet was requested with ranges\n`Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a\nstartRow/startColumn of `0`,\nwhile the second one will have `startRow 14` (zero-based row 15),\nand `startColumn 3` (zero-based column D).",
          "type": "array",
          "items": {
            "$ref": "GridData"
          }
        },
        "bandedRanges": {
          "description": "The banded (i.e. alternating colors) ranges on this sheet.",
          "type": "array",
          "items": {
            "$ref": "BandedRange"
          }
        },
        "properties": {
          "description": "The properties of the sheet.",
          "$ref": "SheetProperties"
        },
        "charts": {
          "description": "The specifications of every chart on this sheet.",
          "type": "array",
          "items": {
            "$ref": "EmbeddedChart"
          }
        },
        "filterViews": {
          "description": "The filter views in this sheet.",
          "type": "array",
          "items": {
            "$ref": "FilterView"
          }
        },
        "protectedRanges": {
          "description": "The protected ranges in this sheet.",
          "type": "array",
          "items": {
            "$ref": "ProtectedRange"
          }
        },
        "conditionalFormats": {
          "description": "The conditional format rules in this sheet.",
          "type": "array",
          "items": {
            "$ref": "ConditionalFormatRule"
          }
        }
      },
      "id": "Sheet"
    },
    "BooleanRule": {
      "description": "A rule that may or may not match, depending on the condition.",
      "type": "object",
      "properties": {
        "format": {
          "$ref": "CellFormat",
          "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color."
        },
        "condition": {
          "description": "The condition of the rule. If the condition evaluates to true,\nthe format will be applied.",
          "$ref": "BooleanCondition"
        }
      },
      "id": "BooleanRule"
    },
    "FilterCriteria": {
      "description": "Criteria for showing/hiding rows in a filter or filter view.",
      "type": "object",
      "properties": {
        "hiddenValues": {
          "description": "Values that should be hidden.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
          "$ref": "BooleanCondition"
        }
      },
      "id": "FilterCriteria"
    },
    "PivotGroupValueMetadata": {
      "description": "Metadata about a value in a pivot grouping.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
          "$ref": "ExtendedValue"
        },
        "collapsed": {
          "description": "True if the data corresponding to the value is collapsed.",
          "type": "boolean"
        }
      },
      "id": "PivotGroupValueMetadata"
    },
    "Editors": {
      "description": "The editors of a protected range.",
      "type": "object",
      "properties": {
        "users": {
          "description": "The email addresses of users with edit access to the protected range.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groups": {
          "description": "The email addresses of groups with edit access to the protected range.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainUsersCanEdit": {
          "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
          "type": "boolean"
        }
      },
      "id": "Editors"
    },
    "UpdateConditionalFormatRuleRequest": {
      "description": "Updates a conditional format rule at the given index,\nor moves a conditional format rule to another index.",
      "type": "object",
      "properties": {
        "newIndex": {
          "description": "The zero-based new index the rule should end up at.",
          "format": "int32",
          "type": "integer"
        },
        "rule": {
          "$ref": "ConditionalFormatRule",
          "description": "The rule that should replace the rule at the given index."
        },
        "index": {
          "description": "The zero-based index of the rule that should be replaced or moved.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet of the rule to move.  Required if new_index is set,\nunused otherwise.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "UpdateConditionalFormatRuleRequest"
    },
    "BasicChartDomain": {
      "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
      "type": "object",
      "properties": {
        "domain": {
          "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
          "$ref": "ChartData"
        }
      },
      "id": "BasicChartDomain"
    },
    "DataValidationRule": {
      "description": "A data validation rule.",
      "type": "object",
      "properties": {
        "showCustomUi": {
          "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
          "type": "boolean"
        },
        "strict": {
          "description": "True if invalid data should be rejected.",
          "type": "boolean"
        },
        "inputMessage": {
          "description": "A message to show the user when adding data to the cell.",
          "type": "string"
        },
        "condition": {
          "description": "The condition that data in the cell must match.",
          "$ref": "BooleanCondition"
        }
      },
      "id": "DataValidationRule"
    },
    "PasteDataRequest": {
      "description": "Inserts data into the spreadsheet starting at the specified coordinate.",
      "type": "object",
      "properties": {
        "coordinate": {
          "$ref": "GridCoordinate",
          "description": "The coordinate at which the data should start being inserted."
        },
        "data": {
          "description": "The data to insert.",
          "type": "string"
        },
        "delimiter": {
          "description": "The delimiter in the data.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ],
          "description": "How the data should be pasted.",
          "type": "string"
        },
        "html": {
          "description": "True if the data is HTML.",
          "type": "boolean"
        }
      },
      "id": "PasteDataRequest"
    },
    "AppendDimensionRequest": {
      "description": "Appends rows or columns to the end of a sheet.",
      "type": "object",
      "properties": {
        "length": {
          "description": "The number of rows or columns to append.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet to append rows or columns to.",
          "format": "int32",
          "type": "integer"
        },
        "dimension": {
          "description": "Whether rows or columns should be appended.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ]
        }
      },
      "id": "AppendDimensionRequest"
    },
    "AddNamedRangeRequest": {
      "description": "Adds a named range to the spreadsheet.",
      "type": "object",
      "properties": {
        "namedRange": {
          "description": "The named range to add. The namedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
          "$ref": "NamedRange"
        }
      },
      "id": "AddNamedRangeRequest"
    },
    "UpdateEmbeddedObjectPositionRequest": {
      "description": "Update an embedded object's position (such as a moving or resizing a\nchart or image).",
      "type": "object",
      "properties": {
        "newPosition": {
          "description": "An explicit position to move the embedded object to.\nIf newPosition.sheetId is set,\na new sheet with that ID will be created.\nIf newPosition.newSheet is set to true,\na new sheet will be created with an ID that will be chosen for you.",
          "$ref": "EmbeddedObjectPosition"
        },
        "fields": {
          "description": "The fields of OverlayPosition\nthat should be updated when setting a new position. Used only if\nnewPosition.overlayPosition\nis set, in which case at least one field must\nbe specified.  The root `newPosition.overlayPosition` is implied and\nshould not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "objectId": {
          "description": "The ID of the object to moved.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "UpdateEmbeddedObjectPositionRequest"
    },
    "TextRotation": {
      "description": "The rotation applied to text in a cell.",
      "type": "object",
      "properties": {
        "angle": {
          "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the counterclockwise\ndirection, whereas for RTL they are in the clockwise direction",
          "format": "int32",
          "type": "integer"
        },
        "vertical": {
          "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
          "type": "boolean"
        }
      },
      "id": "TextRotation"
    },
    "PieChartSpec": {
      "description": "A \u003ca href=\"/chart/interactive/docs/gallery/piechart\"\u003epie chart\u003c/a\u003e.",
      "type": "object",
      "properties": {
        "domain": {
          "description": "The data that covers the domain of the pie chart.",
          "$ref": "ChartData"
        },
        "threeDimensional": {
          "description": "True if the pie is three dimensional.",
          "type": "boolean"
        },
        "series": {
          "description": "The data that covers the one and only series of the pie chart.",
          "$ref": "ChartData"
        },
        "legendPosition": {
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered.",
            "Each pie slice has a label attached to it."
          ],
          "enum": [
            "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND",
            "LABELED_LEGEND"
          ],
          "description": "Where the legend of the pie chart should be drawn.",
          "type": "string"
        },
        "pieHole": {
          "description": "The size of the hole in the pie chart.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "PieChartSpec"
    },
    "UpdateFilterViewRequest": {
      "description": "Updates properties of the filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "FilterView",
          "description": "The new properties of the filter view."
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `filter` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateFilterViewRequest"
    },
    "ConditionalFormatRule": {
      "description": "A rule describing a conditional format.",
      "type": "object",
      "properties": {
        "ranges": {
          "description": "The ranges that will be formatted if the condition is true.\nAll the ranges must be on the same grid.",
          "type": "array",
          "items": {
            "$ref": "GridRange"
          }
        },
        "gradientRule": {
          "$ref": "GradientRule",
          "description": "The formatting will vary based on the gradients in the rule."
        },
        "booleanRule": {
          "$ref": "BooleanRule",
          "description": "The formatting is either \"on\" or \"off\" according to the rule."
        }
      },
      "id": "ConditionalFormatRule"
    },
    "CopyPasteRequest": {
      "description": "Copies data from the source to the destination.",
      "type": "object",
      "properties": {
        "source": {
          "description": "The source range to copy.",
          "$ref": "GridRange"
        },
        "pasteType": {
          "description": "What kind of data to paste.",
          "type": "string",
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ]
        },
        "destination": {
          "$ref": "GridRange",
          "description": "The location to paste to. If the range covers a span that's\na multiple of the source's height or width, then the\ndata will be repeated to fill in the destination range.\nIf the range is smaller than the source range, the entire\nsource data will still be copied (beyond the end of the destination range)."
        },
        "pasteOrientation": {
          "enumDescriptions": [
            "Paste normally.",
            "Paste transposed, where all rows become columns and vice versa."
          ],
          "enum": [
            "NORMAL",
            "TRANSPOSE"
          ],
          "description": "How that data should be oriented when pasting.",
          "type": "string"
        }
      },
      "id": "CopyPasteRequest"
    },
    "BooleanCondition": {
      "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of condition.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
            "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
            "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
            "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
            "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
            "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
            "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
            "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
            "The cell's value must in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
            "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
            "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
            "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue."
          ],
          "enum": [
            "CONDITION_TYPE_UNSPECIFIED",
            "NUMBER_GREATER",
            "NUMBER_GREATER_THAN_EQ",
            "NUMBER_LESS",
            "NUMBER_LESS_THAN_EQ",
            "NUMBER_EQ",
            "NUMBER_NOT_EQ",
            "NUMBER_BETWEEN",
            "NUMBER_NOT_BETWEEN",
            "TEXT_CONTAINS",
            "TEXT_NOT_CONTAINS",
            "TEXT_STARTS_WITH",
            "TEXT_ENDS_WITH",
            "TEXT_EQ",
            "TEXT_IS_EMAIL",
            "TEXT_IS_URL",
            "DATE_EQ",
            "DATE_BEFORE",
            "DATE_AFTER",
            "DATE_ON_OR_BEFORE",
            "DATE_ON_OR_AFTER",
            "DATE_BETWEEN",
            "DATE_NOT_BETWEEN",
            "DATE_IS_VALID",
            "ONE_OF_RANGE",
            "ONE_OF_LIST",
            "BLANK",
            "NOT_BLANK",
            "CUSTOM_FORMULA"
          ]
        },
        "values": {
          "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
          "type": "array",
          "items": {
            "$ref": "ConditionValue"
          }
        }
      },
      "id": "BooleanCondition"
    },
    "Request": {
      "description": "A single kind of update to apply to a spreadsheet.",
      "type": "object",
      "properties": {
        "sortRange": {
          "description": "Sorts data in a range.",
          "$ref": "SortRangeRequest"
        },
        "deleteProtectedRange": {
          "description": "Deletes a protected range.",
          "$ref": "DeleteProtectedRangeRequest"
        },
        "duplicateFilterView": {
          "description": "Duplicates a filter view.",
          "$ref": "DuplicateFilterViewRequest"
        },
        "addChart": {
          "description": "Adds a chart.",
          "$ref": "AddChartRequest"
        },
        "findReplace": {
          "description": "Finds and replaces occurrences of some text with other text.",
          "$ref": "FindReplaceRequest"
        },
        "textToColumns": {
          "$ref": "TextToColumnsRequest",
          "description": "Converts a column of text into many columns of text."
        },
        "updateChartSpec": {
          "$ref": "UpdateChartSpecRequest",
          "description": "Updates a chart's specifications."
        },
        "addSheet": {
          "description": "Adds a sheet.",
          "$ref": "AddSheetRequest"
        },
        "updateProtectedRange": {
          "description": "Updates a protected range.",
          "$ref": "UpdateProtectedRangeRequest"
        },
        "deleteFilterView": {
          "$ref": "DeleteFilterViewRequest",
          "description": "Deletes a filter view from a sheet."
        },
        "copyPaste": {
          "$ref": "CopyPasteRequest",
          "description": "Copies data from one area and pastes it to another."
        },
        "insertDimension": {
          "$ref": "InsertDimensionRequest",
          "description": "Inserts new rows or columns in a sheet."
        },
        "deleteRange": {
          "description": "Deletes a range of cells from a sheet, shifting the remaining cells.",
          "$ref": "DeleteRangeRequest"
        },
        "deleteBanding": {
          "$ref": "DeleteBandingRequest",
          "description": "Removes a banded range"
        },
        "addFilterView": {
          "$ref": "AddFilterViewRequest",
          "description": "Adds a filter view."
        },
        "updateBorders": {
          "description": "Updates the borders in a range of cells.",
          "$ref": "UpdateBordersRequest"
        },
        "setDataValidation": {
          "$ref": "SetDataValidationRequest",
          "description": "Sets data validation for one or more cells."
        },
        "deleteConditionalFormatRule": {
          "description": "Deletes an existing conditional format rule.",
          "$ref": "DeleteConditionalFormatRuleRequest"
        },
        "repeatCell": {
          "description": "Repeats a single cell across a range.",
          "$ref": "RepeatCellRequest"
        },
        "clearBasicFilter": {
          "description": "Clears the basic filter on a sheet.",
          "$ref": "ClearBasicFilterRequest"
        },
        "appendDimension": {
          "description": "Appends dimensions to the end of a sheet.",
          "$ref": "AppendDimensionRequest"
        },
        "updateConditionalFormatRule": {
          "$ref": "UpdateConditionalFormatRuleRequest",
          "description": "Updates an existing conditional format rule."
        },
        "insertRange": {
          "description": "Inserts new cells in a sheet, shifting the existing cells.",
          "$ref": "InsertRangeRequest"
        },
        "moveDimension": {
          "description": "Moves rows or columns to another location in a sheet.",
          "$ref": "MoveDimensionRequest"
        },
        "updateBanding": {
          "description": "Updates a banded range",
          "$ref": "UpdateBandingRequest"
        },
        "deleteNamedRange": {
          "$ref": "DeleteNamedRangeRequest",
          "description": "Deletes a named range."
        },
        "addProtectedRange": {
          "description": "Adds a protected range.",
          "$ref": "AddProtectedRangeRequest"
        },
        "duplicateSheet": {
          "$ref": "DuplicateSheetRequest",
          "description": "Duplicates a sheet."
        },
        "unmergeCells": {
          "description": "Unmerges merged cells.",
          "$ref": "UnmergeCellsRequest"
        },
        "deleteSheet": {
          "$ref": "DeleteSheetRequest",
          "description": "Deletes a sheet."
        },
        "updateEmbeddedObjectPosition": {
          "description": "Updates an embedded object's (e.g. chart, image) position.",
          "$ref": "UpdateEmbeddedObjectPositionRequest"
        },
        "updateDimensionProperties": {
          "$ref": "UpdateDimensionPropertiesRequest",
          "description": "Updates dimensions' properties."
        },
        "pasteData": {
          "description": "Pastes data (HTML or delimited) into a sheet.",
          "$ref": "PasteDataRequest"
        },
        "setBasicFilter": {
          "description": "Sets the basic filter on a sheet.",
          "$ref": "SetBasicFilterRequest"
        },
        "addConditionalFormatRule": {
          "$ref": "AddConditionalFormatRuleRequest",
          "description": "Adds a new conditional format rule."
        },
        "addNamedRange": {
          "description": "Adds a named range.",
          "$ref": "AddNamedRangeRequest"
        },
        "updateCells": {
          "$ref": "UpdateCellsRequest",
          "description": "Updates many cells at once."
        },
        "updateSpreadsheetProperties": {
          "$ref": "UpdateSpreadsheetPropertiesRequest",
          "description": "Updates the spreadsheet's properties."
        },
        "deleteEmbeddedObject": {
          "$ref": "DeleteEmbeddedObjectRequest",
          "description": "Deletes an embedded object (e.g, chart, image) in a sheet."
        },
        "updateFilterView": {
          "$ref": "UpdateFilterViewRequest",
          "description": "Updates the properties of a filter view."
        },
        "addBanding": {
          "description": "Adds a new banded range",
          "$ref": "AddBandingRequest"
        },
        "autoResizeDimensions": {
          "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
          "$ref": "AutoResizeDimensionsRequest"
        },
        "appendCells": {
          "description": "Appends cells after the last row with data in a sheet.",
          "$ref": "AppendCellsRequest"
        },
        "cutPaste": {
          "description": "Cuts data from one area and pastes it to another.",
          "$ref": "CutPasteRequest"
        },
        "mergeCells": {
          "$ref": "MergeCellsRequest",
          "description": "Merges cells together."
        },
        "updateNamedRange": {
          "$ref": "UpdateNamedRangeRequest",
          "description": "Updates a named range."
        },
        "updateSheetProperties": {
          "$ref": "UpdateSheetPropertiesRequest",
          "description": "Updates a sheet's properties."
        },
        "deleteDimension": {
          "$ref": "DeleteDimensionRequest",
          "description": "Deletes rows or columns in a sheet."
        },
        "autoFill": {
          "description": "Automatically fills in more data based on existing data.",
          "$ref": "AutoFillRequest"
        }
      },
      "id": "Request"
    },
    "GridRange": {
      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
      "type": "object",
      "properties": {
        "endRowIndex": {
          "description": "The end row (exclusive) of the range, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "endColumnIndex": {
          "description": "The end column (exclusive) of the range, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "startRowIndex": {
          "description": "The start row (inclusive) of the range, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "startColumnIndex": {
          "description": "The start column (inclusive) of the range, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet this range is on.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "GridRange"
    },
    "BasicChartSpec": {
      "description": "The specification for a basic chart.  See BasicChartType for the list\nof charts this supports.",
      "type": "object",
      "properties": {
        "chartType": {
          "enumDescriptions": [
            "Default value, do not use.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/barchart\"\u003ebar chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/linechart\"\u003eline chart\u003c/a\u003e.",
            "An \u003ca href=\"/chart/interactive/docs/gallery/areachart\"\u003earea chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/columnchart\"\u003ecolumn chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/scatterchart\"\u003escatter chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/combochart\"\u003ecombo chart\u003c/a\u003e."
          ],
          "enum": [
            "BASIC_CHART_TYPE_UNSPECIFIED",
            "BAR",
            "LINE",
            "AREA",
            "COLUMN",
            "SCATTER",
            "COMBO"
          ],
          "description": "The type of the chart.",
          "type": "string"
        },
        "series": {
          "description": "The data this chart is visualizing.",
          "type": "array",
          "items": {
            "$ref": "BasicChartSeries"
          }
        },
        "legendPosition": {
          "enumDescriptions": [
            "Default value, do not use.",
            "The legend is rendered on the bottom of the chart.",
            "The legend is rendered on the left of the chart.",
            "The legend is rendered on the right of the chart.",
            "The legend is rendered on the top of the chart.",
            "No legend is rendered."
          ],
          "enum": [
            "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
            "BOTTOM_LEGEND",
            "LEFT_LEGEND",
            "RIGHT_LEGEND",
            "TOP_LEGEND",
            "NO_LEGEND"
          ],
          "description": "The position of the chart legend.",
          "type": "string"
        },
        "domains": {
          "description": "The domain of data this is charting.\nOnly a single domain is supported.",
          "type": "array",
          "items": {
            "$ref": "BasicChartDomain"
          }
        },
        "headerCount": {
          "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
          "format": "int32",
          "type": "integer"
        },
        "axis": {
          "description": "The axis on the chart.",
          "type": "array",
          "items": {
            "$ref": "BasicChartAxis"
          }
        }
      },
      "id": "BasicChartSpec"
    },
    "SetDataValidationRequest": {
      "description": "Sets a data validation rule to every cell in the range.\nTo clear validation in a range, call this with no rule specified.",
      "type": "object",
      "properties": {
        "rule": {
          "description": "The data validation rule to set on each cell in the range,\nor empty to clear the data validation in the range.",
          "$ref": "DataValidationRule"
        },
        "range": {
          "description": "The range the data validation rule should apply to.",
          "$ref": "GridRange"
        }
      },
      "id": "SetDataValidationRequest"
    },
    "CellData": {
      "description": "Data about a specific cell.",
      "type": "object",
      "properties": {
        "dataValidation": {
          "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
          "$ref": "DataValidationRule"
        },
        "userEnteredValue": {
          "$ref": "ExtendedValue",
          "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format."
        },
        "effectiveValue": {
          "description": "The effective value of the cell. For cells with formulas, this will be\nthe calculated value.  For cells with literals, this will be\nthe same as the user_entered_value.\nThis field is read-only.",
          "$ref": "ExtendedValue"
        },
        "textFormatRuns": {
          "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs will be erased.",
          "type": "array",
          "items": {
            "$ref": "TextFormatRun"
          }
        },
        "formattedValue": {
          "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
          "type": "string"
        },
        "hyperlink": {
          "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula.)",
          "type": "string"
        },
        "pivotTable": {
          "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
          "$ref": "PivotTable"
        },
        "userEnteredFormat": {
          "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
          "$ref": "CellFormat"
        },
        "effectiveFormat": {
          "$ref": "CellFormat",
          "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only."
        },
        "note": {
          "description": "Any note on the cell.",
          "type": "string"
        }
      },
      "id": "CellData"
    },
    "BatchUpdateSpreadsheetRequest": {
      "description": "The request for updating any aspect of a spreadsheet.",
      "type": "object",
      "properties": {
        "requests": {
          "description": "A list of updates to apply to the spreadsheet.\nRequests will be applied in the order they are specified.\nIf any request is not valid, no requests will be applied.",
          "type": "array",
          "items": {
            "$ref": "Request"
          }
        },
        "includeSpreadsheetInResponse": {
          "description": "Determines if the update response should include the spreadsheet\nresource.",
          "type": "boolean"
        },
        "responseRanges": {
          "description": "Limits the ranges included in the response spreadsheet.\nMeaningful only if include_spreadsheet_response is 'true'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseIncludeGridData": {
          "description": "True if grid data should be returned. Meaningful only if\nif include_spreadsheet_response is 'true'.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean"
        }
      },
      "id": "BatchUpdateSpreadsheetRequest"
    },
    "Padding": {
      "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
      "type": "object",
      "properties": {
        "top": {
          "description": "The top padding of the cell.",
          "format": "int32",
          "type": "integer"
        },
        "left": {
          "description": "The left padding of the cell.",
          "format": "int32",
          "type": "integer"
        },
        "right": {
          "description": "The right padding of the cell.",
          "format": "int32",
          "type": "integer"
        },
        "bottom": {
          "description": "The bottom padding of the cell.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Padding"
    },
    "BasicChartAxis": {
      "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
      "type": "object",
      "properties": {
        "position": {
          "enumDescriptions": [
            "Default value, do not use.",
            "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
            "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
            "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
          ],
          "enum": [
            "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
            "BOTTOM_AXIS",
            "LEFT_AXIS",
            "RIGHT_AXIS"
          ],
          "description": "The position of this axis.",
          "type": "string"
        },
        "title": {
          "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
          "type": "string"
        },
        "format": {
          "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
          "$ref": "TextFormat"
        }
      },
      "id": "BasicChartAxis"
    },
    "DeleteDimensionRequest": {
      "description": "Deletes the dimensions from the sheet.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "DimensionRange",
          "description": "The dimensions to delete from the sheet."
        }
      },
      "id": "DeleteDimensionRequest"
    },
    "UpdateChartSpecRequest": {
      "description": "Updates a chart's specifications.\n(This does not move or resize a chart. To move or resize a chart, use\n UpdateEmbeddedObjectPositionRequest.)",
      "type": "object",
      "properties": {
        "chartId": {
          "description": "The ID of the chart to update.",
          "format": "int32",
          "type": "integer"
        },
        "spec": {
          "description": "The specification to apply to the chart.",
          "$ref": "ChartSpec"
        }
      },
      "id": "UpdateChartSpecRequest"
    },
    "DeleteFilterViewRequest": {
      "description": "Deletes a particular filter view.",
      "type": "object",
      "properties": {
        "filterId": {
          "description": "The ID of the filter to delete.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteFilterViewRequest"
    },
    "BatchUpdateValuesResponse": {
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "totalUpdatedRows": {
          "description": "The total number of rows where at least one cell in the row was updated.",
          "format": "int32",
          "type": "integer"
        },
        "responses": {
          "description": "One UpdateValuesResponse per requested range, in the same order as\nthe requests appeared.",
          "type": "array",
          "items": {
            "$ref": "UpdateValuesResponse"
          }
        },
        "totalUpdatedSheets": {
          "description": "The total number of sheets where at least one cell in the sheet was\nupdated.",
          "format": "int32",
          "type": "integer"
        },
        "totalUpdatedCells": {
          "description": "The total number of cells updated.",
          "format": "int32",
          "type": "integer"
        },
        "totalUpdatedColumns": {
          "description": "The total number of columns where at least one cell in the column was\nupdated.",
          "format": "int32",
          "type": "integer"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      },
      "id": "BatchUpdateValuesResponse"
    },
    "SortRangeRequest": {
      "description": "Sorts data in rows based on a sort order per column.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "GridRange",
          "description": "The range to sort."
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "$ref": "SortSpec"
          }
        }
      },
      "id": "SortRangeRequest"
    },
    "MergeCellsRequest": {
      "description": "Merges all cells in the range.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range of cells to merge.",
          "$ref": "GridRange"
        },
        "mergeType": {
          "description": "How the cells should be merged.",
          "type": "string",
          "enumDescriptions": [
            "Create a single merge from the range",
            "Create a merge for each column in the range",
            "Create a merge for each row in the range"
          ],
          "enum": [
            "MERGE_ALL",
            "MERGE_COLUMNS",
            "MERGE_ROWS"
          ]
        }
      },
      "id": "MergeCellsRequest"
    },
    "AddProtectedRangeRequest": {
      "description": "Adds a new protected range.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "$ref": "ProtectedRange",
          "description": "The protected range to be added. The\nprotectedRangeId field is optional; if\none is not set, an id will be randomly generated. (It is an error to\nspecify the ID of a range that already exists.)"
        }
      },
      "id": "AddProtectedRangeRequest"
    },
    "BatchClearValuesRequest": {
      "description": "The request for clearing more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "ranges": {
          "description": "The ranges to clear, in A1 notation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "BatchClearValuesRequest"
    },
    "DuplicateFilterViewResponse": {
      "description": "The result of a filter view being duplicated.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The newly created filter.",
          "$ref": "FilterView"
        }
      },
      "id": "DuplicateFilterViewResponse"
    },
    "DuplicateSheetResponse": {
      "description": "The result of duplicating a sheet.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "SheetProperties",
          "description": "The properties of the duplicate sheet."
        }
      },
      "id": "DuplicateSheetResponse"
    },
    "TextToColumnsRequest": {
      "description": "Splits a column of text into multiple columns,\nbased on a delimiter in each cell.",
      "type": "object",
      "properties": {
        "source": {
          "$ref": "GridRange",
          "description": "The source data range.  This must span exactly one column."
        },
        "delimiterType": {
          "enumDescriptions": [
            "Default value. This value must not be used.",
            "\",\"",
            "\";\"",
            "\".\"",
            "\" \"",
            "A custom value as defined in delimiter."
          ],
          "enum": [
            "DELIMITER_TYPE_UNSPECIFIED",
            "COMMA",
            "SEMICOLON",
            "PERIOD",
            "SPACE",
            "CUSTOM"
          ],
          "description": "The delimiter type to use.",
          "type": "string"
        },
        "delimiter": {
          "description": "The delimiter to use. Used only if delimiterType is\nCUSTOM.",
          "type": "string"
        }
      },
      "id": "TextToColumnsRequest"
    },
    "ClearBasicFilterRequest": {
      "description": "Clears the basic filter, if any exists on the sheet.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The sheet ID on which the basic filter should be cleared.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "ClearBasicFilterRequest"
    },
    "BatchUpdateSpreadsheetResponse": {
      "description": "The reply for batch updating a spreadsheet.",
      "type": "object",
      "properties": {
        "replies": {
          "description": "The reply of the updates.  This maps 1:1 with the updates, although\nreplies to some requests may be empty.",
          "type": "array",
          "items": {
            "$ref": "Response"
          }
        },
        "updatedSpreadsheet": {
          "description": "The spreadsheet after updates were applied. This is only set if\n[BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.",
          "$ref": "Spreadsheet"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      },
      "id": "BatchUpdateSpreadsheetResponse"
    },
    "DeleteBandingRequest": {
      "description": "Removes the banded range with the given ID from the spreadsheet.",
      "type": "object",
      "properties": {
        "bandedRangeId": {
          "description": "The ID of the banded range to delete.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteBandingRequest"
    },
    "AppendValuesResponse": {
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "tableRange": {
          "description": "The range (in A1 notation) of the table that values are being appended to\n(before the values were appended).\nEmpty if no table was found.",
          "type": "string"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "updates": {
          "$ref": "UpdateValuesResponse",
          "description": "Information about the updates that were applied."
        }
      },
      "id": "AppendValuesResponse"
    },
    "MoveDimensionRequest": {
      "description": "Moves one or more rows or columns.",
      "type": "object",
      "properties": {
        "destinationIndex": {
          "description": "The zero-based start index of where to move the source data to,\nbased on the coordinates *before* the source data is removed\nfrom the grid.  Existing data will be shifted down or right\n(depending on the dimension) to make room for the moved dimensions.\nThe source dimensions are removed from the grid, so the\nthe data may end up in a different index than specified.\n\nFor example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move\n`\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be\n`ROWS [1..3)`,and the destination index would be `\"4\"`\n(the zero-based index of row 5).\nThe end result would be `A1..A5` of `0, 3, 1, 2, 4`.",
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "$ref": "DimensionRange",
          "description": "The source dimensions to move."
        }
      },
      "id": "MoveDimensionRequest"
    },
    "PivotFilterCriteria": {
      "description": "Criteria for showing/hiding rows in a pivot table.",
      "type": "object",
      "properties": {
        "visibleValues": {
          "description": "Values that should be included.  Values not listed here are excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "PivotFilterCriteria"
    },
    "AddFilterViewRequest": {
      "description": "Adds a filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter to add. The filterViewId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a filter that already exists.)",
          "$ref": "FilterView"
        }
      },
      "id": "AddFilterViewRequest"
    },
    "AddConditionalFormatRuleRequest": {
      "description": "Adds a new conditional format rule at the given index.\nAll subsequent rules' indexes are incremented.",
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "ConditionalFormatRule",
          "description": "The rule to add."
        },
        "index": {
          "description": "The zero-based index where the rule should be inserted.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "AddConditionalFormatRuleRequest"
    },
    "ChartSpec": {
      "description": "The specifications of a chart.",
      "type": "object",
      "properties": {
        "hiddenDimensionStrategy": {
          "enumDescriptions": [
            "Default value, do not use.",
            "Charts will skip hidden rows and columns.",
            "Charts will skip hidden rows only.",
            "Charts will skip hidden columns only.",
            "Charts will not skip any hidden rows or columns."
          ],
          "enum": [
            "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
            "SKIP_HIDDEN_ROWS_AND_COLUMNS",
            "SKIP_HIDDEN_ROWS",
            "SKIP_HIDDEN_COLUMNS",
            "SHOW_ALL"
          ],
          "description": "Determines how the charts will use hidden rows or columns.",
          "type": "string"
        },
        "title": {
          "description": "The title of the chart.",
          "type": "string"
        },
        "pieChart": {
          "description": "A pie chart specification.",
          "$ref": "PieChartSpec"
        },
        "basicChart": {
          "$ref": "BasicChartSpec",
          "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports."
        }
      },
      "id": "ChartSpec"
    },
    "NumberFormat": {
      "description": "The number format of a cell.",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
            "Text formatting, e.g `1000.12`",
            "Number formatting, e.g, `1,000.12`",
            "Percent formatting, e.g `10.12%`",
            "Currency formatting, e.g `$1,000.12`",
            "Date formatting, e.g `9/26/2008`",
            "Time formatting, e.g `3:59:00 PM`",
            "Date+Time formatting, e.g `9/26/08 15:59:00`",
            "Scientific number formatting, e.g `1.01E+03`"
          ],
          "enum": [
            "NUMBER_FORMAT_TYPE_UNSPECIFIED",
            "TEXT",
            "NUMBER",
            "PERCENT",
            "CURRENCY",
            "DATE",
            "TIME",
            "DATE_TIME",
            "SCIENTIFIC"
          ],
          "description": "The type of the number format.\nWhen writing, this field must be set.",
          "type": "string"
        },
        "pattern": {
          "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for more\ninformation about the supported patterns.",
          "type": "string"
        }
      },
      "id": "NumberFormat"
    },
    "SheetProperties": {
      "description": "Properties of a sheet.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The name of the sheet.",
          "type": "string"
        },
        "tabColor": {
          "description": "The color of the tab in the UI.",
          "$ref": "Color"
        },
        "index": {
          "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet will be added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request will be ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
          "format": "int32",
          "type": "integer"
        },
        "rightToLeft": {
          "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
          "type": "boolean"
        },
        "hidden": {
          "description": "True if the sheet is hidden in the UI, false if it's visible.",
          "type": "boolean"
        },
        "gridProperties": {
          "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
          "$ref": "GridProperties"
        },
        "sheetType": {
          "enumDescriptions": [
            "Default value, do not use.",
            "The sheet is a grid.",
            "The sheet has no grid and instead has an object like a chart or image."
          ],
          "enum": [
            "SHEET_TYPE_UNSPECIFIED",
            "GRID",
            "OBJECT"
          ],
          "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
          "type": "string"
        }
      },
      "id": "SheetProperties"
    },
    "UpdateDimensionPropertiesRequest": {
      "description": "Updates properties of dimensions within the specified range.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "DimensionProperties",
          "description": "Properties to update."
        },
        "range": {
          "$ref": "DimensionRange",
          "description": "The rows or columns to update."
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateDimensionPropertiesRequest"
    },
    "SourceAndDestination": {
      "description": "A combination of a source range and how to extend that source.",
      "type": "object",
      "properties": {
        "fillLength": {
          "description": "The number of rows or columns that data should be filled into.\nPositive numbers expand beyond the last row or last column\nof the source.  Negative numbers expand before the first row\nor first column of the source.",
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "$ref": "GridRange",
          "description": "The location of the data to use as the source of the autofill."
        },
        "dimension": {
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "description": "The dimension that data should be filled into.",
          "type": "string"
        }
      },
      "id": "SourceAndDestination"
    },
    "FilterView": {
      "description": "A filter view.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string"
        },
        "filterViewId": {
          "description": "The ID of the filter view.",
          "format": "int32",
          "type": "integer"
        },
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FilterCriteria"
          }
        },
        "title": {
          "description": "The name of the filter view.",
          "type": "string"
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set."
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "$ref": "SortSpec"
          }
        }
      },
      "id": "FilterView"
    },
    "BandingProperties": {
      "description": "Properties referring a single dimension (either row or column). If both\nBandedRange.row_properties and BandedRange.column_properties are\nset, the fill colors are applied to cells according to the following rules:\n\n* header_color and footer_color take priority over band colors.\n* first_band_color takes priority over second_band_color.\n* row_properties takes priority over column_properties.\n\nFor example, the first row color takes priority over the first column\ncolor, but the first column color takes priority over the second row color.\nSimilarly, the row header takes priority over the column header in the\ntop left cell, but the column header takes priority over the first row\ncolor if the row header is not set.",
      "type": "object",
      "properties": {
        "footerColor": {
          "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
          "$ref": "Color"
        },
        "headerColor": {
          "$ref": "Color",
          "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would."
        },
        "firstBandColor": {
          "description": "The first color that is alternating. (Required)",
          "$ref": "Color"
        },
        "secondBandColor": {
          "$ref": "Color",
          "description": "The second color that is alternating. (Required)"
        }
      },
      "id": "BandingProperties"
    },
    "AddProtectedRangeResponse": {
      "description": "The result of adding a new protected range.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "description": "The newly added protected range.",
          "$ref": "ProtectedRange"
        }
      },
      "id": "AddProtectedRangeResponse"
    },
    "BasicFilter": {
      "description": "The default filter associated with a sheet.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "GridRange",
          "description": "The range the filter covers."
        },
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FilterCriteria"
          }
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "$ref": "SortSpec"
          }
        }
      },
      "id": "BasicFilter"
    },
    "UpdateValuesResponse": {
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "updatedRows": {
          "description": "The number of rows where at least one cell in the row was updated.",
          "format": "int32",
          "type": "integer"
        },
        "updatedData": {
          "description": "The values of the cells after updates were applied.\nThis is only included if the request's `includeValuesInResponse` field\nwas `true`.",
          "$ref": "ValueRange"
        },
        "updatedColumns": {
          "description": "The number of columns where at least one cell in the column was updated.",
          "format": "int32",
          "type": "integer"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "updatedRange": {
          "description": "The range (in A1 notation) that updates were applied to.",
          "type": "string"
        },
        "updatedCells": {
          "description": "The number of cells updated.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "UpdateValuesResponse"
    },
    "ErrorValue": {
      "description": "An error in a cell.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of error.",
          "type": "string",
          "enumDescriptions": [
            "The default error type, do not use this.",
            "Corresponds to the `#ERROR!` error.",
            "Corresponds to the `#NULL!` error.",
            "Corresponds to the `#DIV/0` error.",
            "Corresponds to the `#VALUE!` error.",
            "Corresponds to the `#REF!` error.",
            "Corresponds to the `#NAME?` error.",
            "Corresponds to the `#NUM`! error.",
            "Corresponds to the `#N/A` error.",
            "Corresponds to the `Loading...` state."
          ],
          "enum": [
            "ERROR_TYPE_UNSPECIFIED",
            "ERROR",
            "NULL_VALUE",
            "DIVIDE_BY_ZERO",
            "VALUE",
            "REF",
            "NAME",
            "NUM",
            "N_A",
            "LOADING"
          ]
        },
        "message": {
          "description": "A message with more information about the error\n(in the spreadsheet's locale).",
          "type": "string"
        }
      },
      "id": "ErrorValue"
    },
    "PivotValue": {
      "description": "The definition of how a value in a pivot table should be calculated.",
      "type": "object",
      "properties": {
        "summarizeFunction": {
          "enumDescriptions": [
            "The default, do not use.",
            "Corresponds to the `SUM` function.",
            "Corresponds to the `COUNTA` function.",
            "Corresponds to the `COUNT` function.",
            "Corresponds to the `COUNTUNIQUE` function.",
            "Corresponds to the `AVERAGE` function.",
            "Corresponds to the `MAX` function.",
            "Corresponds to the `MIN` function.",
            "Corresponds to the `MEDIAN` function.",
            "Corresponds to the `PRODUCT` function.",
            "Corresponds to the `STDEV` function.",
            "Corresponds to the `STDEVP` function.",
            "Corresponds to the `VAR` function.",
            "Corresponds to the `VARP` function.",
            "Indicates the formula should be used as-is.\nOnly valid if PivotValue.formula was set."
          ],
          "enum": [
            "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
            "SUM",
            "COUNTA",
            "COUNT",
            "COUNTUNIQUE",
            "AVERAGE",
            "MAX",
            "MIN",
            "MEDIAN",
            "PRODUCT",
            "STDEV",
            "STDEVP",
            "VAR",
            "VARP",
            "CUSTOM"
          ],
          "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
          "type": "string"
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "A name to use for the value. This is only used if formula was set.\nOtherwise, the column name is used.",
          "type": "string"
        },
        "formula": {
          "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
          "type": "string"
        }
      },
      "id": "PivotValue"
    },
    "CopySheetToAnotherSpreadsheetRequest": {
      "description": "The request to copy a sheet across spreadsheets.",
      "type": "object",
      "properties": {
        "destinationSpreadsheetId": {
          "description": "The ID of the spreadsheet to copy the sheet to.",
          "type": "string"
        }
      },
      "id": "CopySheetToAnotherSpreadsheetRequest"
    },
    "PivotGroupSortValueBucket": {
      "description": "Information about which values in a pivot group should be used for sorting.",
      "type": "object",
      "properties": {
        "valuesIndex": {
          "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
          "format": "int32",
          "type": "integer"
        },
        "buckets": {
          "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
          "type": "array",
          "items": {
            "$ref": "ExtendedValue"
          }
        }
      },
      "id": "PivotGroupSortValueBucket"
    },
    "EmbeddedObjectPosition": {
      "description": "The position of an embedded object such as a chart.",
      "type": "object",
      "properties": {
        "newSheet": {
          "description": "If true, the embedded object will be put on a new sheet whose ID\nis chosen for you. Used only when writing.",
          "type": "boolean"
        },
        "sheetId": {
          "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
          "format": "int32",
          "type": "integer"
        },
        "overlayPosition": {
          "description": "The position at which the object is overlaid on top of a grid.",
          "$ref": "OverlayPosition"
        }
      },
      "id": "EmbeddedObjectPosition"
    },
    "DeleteProtectedRangeRequest": {
      "description": "Deletes the protected range with the given ID.",
      "type": "object",
      "properties": {
        "protectedRangeId": {
          "description": "The ID of the protected range to delete.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteProtectedRangeRequest"
    },
    "AutoFillRequest": {
      "description": "Fills in more data based on existing data.",
      "type": "object",
      "properties": {
        "useAlternateSeries": {
          "description": "True if we should generate data with the \"alternate\" series.\nThis differs based on the type and amount of source data.",
          "type": "boolean"
        },
        "sourceAndDestination": {
          "$ref": "SourceAndDestination",
          "description": "The source and destination areas to autofill.\nThis explicitly lists the source of the autofill and where to\nextend that data."
        },
        "range": {
          "description": "The range to autofill. This will examine the range and detect\nthe location that has data and automatically fill that data\nin to the rest of the range.",
          "$ref": "GridRange"
        }
      },
      "id": "AutoFillRequest"
    },
    "GradientRule": {
      "description": "A rule that applies a gradient color scale format, based on\nthe interpolation points listed. The format of a cell will vary\nbased on its contents as compared to the values of the interpolation\npoints.",
      "type": "object",
      "properties": {
        "midpoint": {
          "$ref": "InterpolationPoint",
          "description": "An optional midway interpolation point."
        },
        "minpoint": {
          "description": "The starting interpolation point.",
          "$ref": "InterpolationPoint"
        },
        "maxpoint": {
          "description": "The final interpolation point.",
          "$ref": "InterpolationPoint"
        }
      },
      "id": "GradientRule"
    },
    "SetBasicFilterRequest": {
      "description": "Sets the basic filter associated with a sheet.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter to set.",
          "$ref": "BasicFilter"
        }
      },
      "id": "SetBasicFilterRequest"
    },
    "ClearValuesRequest": {
      "description": "The request for clearing a range of values in a spreadsheet.",
      "type": "object",
      "properties": {},
      "id": "ClearValuesRequest"
    },
    "InterpolationPoint": {
      "description": "A single interpolation point on a gradient conditional format.\nThese pin the gradient color scale according to the color,\ntype and value chosen.",
      "type": "object",
      "properties": {
        "color": {
          "description": "The color this interpolation point should use.",
          "$ref": "Color"
        },
        "type": {
          "description": "How the value should be interpreted.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "The interpolation point will use the minimum value in the\ncells over the range of the conditional format.",
            "The interpolation point will use the maximum value in the\ncells over the range of the conditional format.",
            "The interpolation point will use exactly the value in\nInterpolationPoint.value.",
            "The interpolation point will be the given percentage over\nall the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=(MAX(FLATTEN(range)) * (value / 100))\n  + (MIN(FLATTEN(range)) * (1 - (value / 100)))`\n(where errors in the range are ignored when flattening).",
            "The interpolation point will be the given percentile\nover all the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=PERCENTILE(FLATTEN(range), value / 100)`\n(where errors in the range are ignored when flattening)."
          ],
          "enum": [
            "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
            "MIN",
            "MAX",
            "NUMBER",
            "PERCENT",
            "PERCENTILE"
          ]
        },
        "value": {
          "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
          "type": "string"
        }
      },
      "id": "InterpolationPoint"
    },
    "DeleteEmbeddedObjectRequest": {
      "description": "Deletes the embedded object with the given ID.",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "The ID of the embedded object to delete.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteEmbeddedObjectRequest"
    },
    "FindReplaceResponse": {
      "description": "The result of the find/replace.",
      "type": "object",
      "properties": {
        "occurrencesChanged": {
          "description": "The number of occurrences (possibly multiple within a cell) changed.\nFor example, if replacing `\"e\"` with `\"o\"` in `\"Google Sheets\"`, this would\nbe `\"3\"` because `\"Google Sheets\"` -\u003e `\"Googlo Shoots\"`.",
          "format": "int32",
          "type": "integer"
        },
        "rowsChanged": {
          "description": "The number of rows changed.",
          "format": "int32",
          "type": "integer"
        },
        "sheetsChanged": {
          "description": "The number of sheets changed.",
          "format": "int32",
          "type": "integer"
        },
        "formulasChanged": {
          "description": "The number of formula cells changed.",
          "format": "int32",
          "type": "integer"
        },
        "valuesChanged": {
          "description": "The number of non-formula cells changed.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "FindReplaceResponse"
    },
    "DuplicateFilterViewRequest": {
      "description": "Duplicates a particular filter view.",
      "type": "object",
      "properties": {
        "filterId": {
          "description": "The ID of the filter being duplicated.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DuplicateFilterViewRequest"
    },
    "DeleteSheetRequest": {
      "description": "Deletes the requested sheet.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The ID of the sheet to delete.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteSheetRequest"
    },
    "UpdateConditionalFormatRuleResponse": {
      "description": "The result of updating a conditional format rule.",
      "type": "object",
      "properties": {
        "oldRule": {
          "description": "The old (deleted) rule. Not set if a rule was moved\n(because it is the same as new_rule).",
          "$ref": "ConditionalFormatRule"
        },
        "newIndex": {
          "description": "The index of the new rule.",
          "format": "int32",
          "type": "integer"
        },
        "oldIndex": {
          "description": "The old index of the rule. Not set if a rule was replaced\n(because it is the same as new_index).",
          "format": "int32",
          "type": "integer"
        },
        "newRule": {
          "$ref": "ConditionalFormatRule",
          "description": "The new rule that replaced the old rule (if replacing),\nor the rule that was moved (if moved)"
        }
      },
      "id": "UpdateConditionalFormatRuleResponse"
    },
    "ConditionValue": {
      "description": "The value of the condition.",
      "type": "object",
      "properties": {
        "relativeDate": {
          "enumDescriptions": [
            "Default value, do not use.",
            "The value is one year before today.",
            "The value is one month before today.",
            "The value is one week before today.",
            "The value is yesterday.",
            "The value is today.",
            "The value is tomorrow."
          ],
          "enum": [
            "RELATIVE_DATE_UNSPECIFIED",
            "PAST_YEAR",
            "PAST_MONTH",
            "PAST_WEEK",
            "YESTERDAY",
            "TODAY",
            "TOMORROW"
          ],
          "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
          "type": "string"
        },
        "userEnteredValue": {
          "description": "A value the condition is based on.\nThe value will be parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=`).",
          "type": "string"
        }
      },
      "id": "ConditionValue"
    },
    "DuplicateSheetRequest": {
      "description": "Duplicates the contents of a sheet.",
      "type": "object",
      "properties": {
        "newSheetName": {
          "description": "The name of the new sheet.  If empty, a new name is chosen for you.",
          "type": "string"
        },
        "sourceSheetId": {
          "description": "The sheet to duplicate.",
          "format": "int32",
          "type": "integer"
        },
        "newSheetId": {
          "description": "If set, the ID of the new sheet. If not set, an ID is chosen.\nIf set, the ID must not conflict with any existing sheet ID.\nIf set, it must be non-negative.",
          "format": "int32",
          "type": "integer"
        },
        "insertSheetIndex": {
          "description": "The zero-based index where the new sheet should be inserted.\nThe index of all sheets after this are incremented.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DuplicateSheetRequest"
    },
    "ExtendedValue": {
      "description": "The kinds of value that a cell in a spreadsheet can have.",
      "type": "object",
      "properties": {
        "stringValue": {
          "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
          "type": "string"
        },
        "boolValue": {
          "description": "Represents a boolean value.",
          "type": "boolean"
        },
        "formulaValue": {
          "description": "Represents a formula.",
          "type": "string"
        },
        "numberValue": {
          "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
          "format": "double",
          "type": "number"
        },
        "errorValue": {
          "description": "Represents an error.\nThis field is read-only.",
          "$ref": "ErrorValue"
        }
      },
      "id": "ExtendedValue"
    },
    "BandedRange": {
      "description": "A banded (alternating colors) range in a sheet.",
      "type": "object",
      "properties": {
        "rowProperties": {
          "$ref": "BandingProperties",
          "description": "Properties for row bands. These properties will be applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified."
        },
        "columnProperties": {
          "$ref": "BandingProperties",
          "description": "Properties for column bands. These properties will be applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified."
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range over which these properties are applied."
        },
        "bandedRangeId": {
          "description": "The id of the banded range.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "BandedRange"
    },
    "Spreadsheet": {
      "description": "Resource that represents a spreadsheet.",
      "type": "object",
      "properties": {
        "spreadsheetUrl": {
          "description": "The url of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        },
        "properties": {
          "$ref": "SpreadsheetProperties",
          "description": "Overall properties of a spreadsheet."
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        },
        "sheets": {
          "description": "The sheets that are part of a spreadsheet.",
          "type": "array",
          "items": {
            "$ref": "Sheet"
          }
        },
        "namedRanges": {
          "description": "The named ranges defined in a spreadsheet.",
          "type": "array",
          "items": {
            "$ref": "NamedRange"
          }
        }
      },
      "id": "Spreadsheet"
    },
    "AddChartRequest": {
      "description": "Adds a chart to a sheet in the spreadsheet.",
      "type": "object",
      "properties": {
        "chart": {
          "description": "The chart that should be added to the spreadsheet, including the position\nwhere it should be placed. The chartId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a chart that already exists.)",
          "$ref": "EmbeddedChart"
        }
      },
      "id": "AddChartRequest"
    },
    "BatchClearValuesResponse": {
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "clearedRanges": {
          "description": "The ranges that were cleared, in A1 notation.\n(If the requests were for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual ranges\n that were cleared, bounded to the sheet's limits.)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "BatchClearValuesResponse"
    },
    "UpdateProtectedRangeRequest": {
      "description": "Updates an existing protected range with the specified\nprotectedRangeId.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "description": "The protected range to update with the new properties.",
          "$ref": "ProtectedRange"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `protectedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateProtectedRangeRequest"
    },
    "TextFormat": {
      "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
      "type": "object",
      "properties": {
        "foregroundColor": {
          "description": "The foreground color of the text.",
          "$ref": "Color"
        },
        "bold": {
          "description": "True if the text is bold.",
          "type": "boolean"
        },
        "fontFamily": {
          "description": "The font family.",
          "type": "string"
        },
        "strikethrough": {
          "description": "True if the text has a strikethrough.",
          "type": "boolean"
        },
        "italic": {
          "description": "True if the text is italicized.",
          "type": "boolean"
        },
        "fontSize": {
          "description": "The size of the font.",
          "format": "int32",
          "type": "integer"
        },
        "underline": {
          "description": "True if the text is underlined.",
          "type": "boolean"
        }
      },
      "id": "TextFormat"
    },
    "AddSheetResponse": {
      "description": "The result of adding a sheet.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties of the newly added sheet.",
          "$ref": "SheetProperties"
        }
      },
      "id": "AddSheetResponse"
    },
    "AddFilterViewResponse": {
      "description": "The result of adding a filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "FilterView",
          "description": "The newly added filter view."
        }
      },
      "id": "AddFilterViewResponse"
    },
    "IterativeCalculationSettings": {
      "description": "Settings to control how circular dependencies are resolved with iterative\ncalculation.",
      "type": "object",
      "properties": {
        "maxIterations": {
          "description": "When iterative calculation is enabled, the maximum number of calculation\nrounds to perform.",
          "format": "int32",
          "type": "integer"
        },
        "convergenceThreshold": {
          "description": "When iterative calculation is enabled and successive results differ by\nless than this threshold value, the calculation rounds stop.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "IterativeCalculationSettings"
    },
    "SpreadsheetProperties": {
      "description": "Properties of a spreadsheet.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the spreadsheet.",
          "type": "string"
        },
        "timeZone": {
          "description": "The time zone of the spreadsheet, in CLDR format such as\n`America/New_York`. If the time zone isn't recognized, this may\nbe a custom time zone such as `GMT-07:00`.",
          "type": "string"
        },
        "locale": {
          "description": "The locale of the spreadsheet in one of the following formats:\n\n* an ISO 639-1 language code such as `en`\n\n* an ISO 639-2 language code such as `fil`, if no 639-1 code exists\n\n* a combination of the ISO language code and country code, such as `en_US`\n\nNote: when updating this field, not all locales/languages are supported.",
          "type": "string"
        },
        "iterativeCalculationSettings": {
          "description": "Determines whether and how circular references are resolved with iterative\ncalculation.  Absence of this field means that circular references will\nresult in calculation errors.",
          "$ref": "IterativeCalculationSettings"
        },
        "autoRecalc": {
          "description": "The amount of time to wait before volatile functions are recalculated.",
          "type": "string",
          "enumDescriptions": [
            "Default value. This value must not be used.",
            "Volatile functions are updated on every change.",
            "Volatile functions are updated on every change and every minute.",
            "Volatile functions are updated on every change and hourly."
          ],
          "enum": [
            "RECALCULATION_INTERVAL_UNSPECIFIED",
            "ON_CHANGE",
            "MINUTE",
            "HOUR"
          ]
        },
        "defaultFormat": {
          "$ref": "CellFormat",
          "description": "The default format of all cells in the spreadsheet.\nCellData.effectiveFormat will not be set if the\ncell's format is equal to this default format.\nThis field is read-only."
        }
      },
      "id": "SpreadsheetProperties"
    },
    "OverlayPosition": {
      "description": "The location an object is overlaid on top of a grid.",
      "type": "object",
      "properties": {
        "widthPixels": {
          "description": "The width of the object, in pixels. Defaults to 600.",
          "format": "int32",
          "type": "integer"
        },
        "offsetXPixels": {
          "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "format": "int32",
          "type": "integer"
        },
        "anchorCell": {
          "$ref": "GridCoordinate",
          "description": "The cell the object is anchored to."
        },
        "offsetYPixels": {
          "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "format": "int32",
          "type": "integer"
        },
        "heightPixels": {
          "description": "The height of the object, in pixels. Defaults to 371.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "OverlayPosition"
    },
    "RepeatCellRequest": {
      "description": "Updates all cells in the range to the values in the given Cell object.\nOnly the fields listed in the fields field are updated; others are\nunchanged.\n\nIf writing a cell with a formula, the formula's ranges will automatically\nincrement for each field in the range.\nFor example, if writing a cell with formula `=A1` into range B2:C4,\nB2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,\nC2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.\n\nTo keep the formula's ranges static, use the `$` indicator.\nFor example, use the formula `=$A$1` to prevent both the row and the\ncolumn from incrementing.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "GridRange",
          "description": "The range to repeat the cell in."
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `cell` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "cell": {
          "description": "The data to write.",
          "$ref": "CellData"
        }
      },
      "id": "RepeatCellRequest"
    },
    "AddChartResponse": {
      "description": "The result of adding a chart to a spreadsheet.",
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "EmbeddedChart",
          "description": "The newly added chart."
        }
      },
      "id": "AddChartResponse"
    },
    "InsertDimensionRequest": {
      "description": "Inserts rows or columns in a sheet at a particular index.",
      "type": "object",
      "properties": {
        "inheritFromBefore": {
          "description": "Whether dimension properties should be extended from the dimensions\nbefore or after the newly inserted dimensions.\nTrue to inherit from the dimensions before (in which case the start\nindex must be greater than 0), and false to inherit from the dimensions\nafter.\n\nFor example, if row index 0 has red background and row index 1\nhas a green background, then inserting 2 rows at index 1 can inherit\neither the green or red background.  If `inheritFromBefore` is true,\nthe two new rows will be red (because the row before the insertion point\nwas red), whereas if `inheritFromBefore` is false, the two new rows will\nbe green (because the row after the insertion point was green).",
          "type": "boolean"
        },
        "range": {
          "description": "The dimensions to insert.  Both the start and end indexes must be bounded.",
          "$ref": "DimensionRange"
        }
      },
      "id": "InsertDimensionRequest"
    },
    "UpdateSpreadsheetPropertiesRequest": {
      "description": "Updates properties of a spreadsheet.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "SpreadsheetProperties",
          "description": "The properties to update."
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root 'properties' is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateSpreadsheetPropertiesRequest"
    },
    "BatchUpdateValuesRequest": {
      "description": "The request for updating more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "responseValueRenderOption": {
          "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
          "type": "string",
          "enumDescriptions": [
            "Values will be calculated & formatted in the reply according to the\ncell's formatting.  Formatting is based on the spreadsheet's locale,\nnot the requesting user's locale.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return `\"$1.23\"`.",
            "Values will be calculated, but not formatted in the reply.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen `A2` would return the number `1.23`.",
            "Values will not be calculated.  The reply will include the formulas.\nFor example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency,\nthen A2 would return `\"=A1\"`."
          ],
          "enum": [
            "FORMATTED_VALUE",
            "UNFORMATTED_VALUE",
            "FORMULA"
          ]
        },
        "includeValuesInResponse": {
          "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values. The `updatedData` field within\neach of the BatchUpdateValuesResponse.responses will contain\nthe updated values. If the range to write was larger than than the range\nactually written, the response will include all values in the requested\nrange (excluding trailing empty rows and columns).",
          "type": "boolean"
        },
        "valueInputOption": {
          "description": "How the input data should be interpreted.",
          "type": "string",
          "enumDescriptions": [
            "Default input value. This value must not be used.",
            "The values the user has entered will not be parsed and will be stored\nas-is.",
            "The values will be parsed as if the user typed them into the UI.\nNumbers will stay as numbers, but strings may be converted to numbers,\ndates, etc. following the same rules that are applied when entering\ntext into a cell via the Google Sheets UI."
          ],
          "enum": [
            "INPUT_VALUE_OPTION_UNSPECIFIED",
            "RAW",
            "USER_ENTERED"
          ]
        },
        "data": {
          "description": "The new values to apply to the spreadsheet.",
          "type": "array",
          "items": {
            "$ref": "ValueRange"
          }
        },
        "responseDateTimeRenderOption": {
          "enumDescriptions": [
            "Instructs date, time, datetime, and duration fields to be output\nas doubles in \"serial number\" format, as popularized by Lotus 1-2-3.\nThe whole number portion of the value (left of the decimal) counts\nthe days since December 30th 1899. The fractional portion (right of\nthe decimal) counts the time as a fraction of the day. For example,\nJanuary 1st 1900 at noon would be 2.5, 2 because it's 2 days after\nDecember 30st 1899, and .5 because noon is half a day.  February 1st\n1900 at 3pm would be 33.625. This correctly treats the year 1900 as\nnot a leap year.",
            "Instructs date, time, datetime, and duration fields to be output\nas strings in their given number format (which is dependent\non the spreadsheet locale)."
          ],
          "enum": [
            "SERIAL_NUMBER",
            "FORMATTED_STRING"
          ],
          "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
          "type": "string"
        }
      },
      "id": "BatchUpdateValuesRequest"
    },
    "ProtectedRange": {
      "description": "A protected range.",
      "type": "object",
      "properties": {
        "requestingUserCanEdit": {
          "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
          "type": "boolean"
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set."
        },
        "editors": {
          "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
          "$ref": "Editors"
        },
        "description": {
          "description": "The description of this protected range.",
          "type": "string"
        },
        "unprotectedRanges": {
          "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
          "type": "array",
          "items": {
            "$ref": "GridRange"
          }
        },
        "namedRangeId": {
          "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string"
        },
        "protectedRangeId": {
          "description": "The ID of the protected range.\nThis field is read-only.",
          "format": "int32",
          "type": "integer"
        },
        "warningOnly": {
          "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
          "type": "boolean"
        }
      },
      "id": "ProtectedRange"
    },
    "DimensionProperties": {
      "description": "Properties about a dimension.",
      "type": "object",
      "properties": {
        "pixelSize": {
          "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "hiddenByFilter": {
          "description": "True if this dimension is being filtered.\nThis field is read-only.",
          "type": "boolean"
        },
        "hiddenByUser": {
          "description": "True if this dimension is explicitly hidden.",
          "type": "boolean"
        }
      },
      "id": "DimensionProperties"
    },
    "NamedRange": {
      "description": "A named range.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range.",
          "type": "string"
        },
        "range": {
          "description": "The range this represents.",
          "$ref": "GridRange"
        },
        "name": {
          "description": "The name of the named range.",
          "type": "string"
        }
      },
      "id": "NamedRange"
    },
    "DimensionRange": {
      "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
      "type": "object",
      "properties": {
        "startIndex": {
          "description": "The start (inclusive) of the span, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "endIndex": {
          "description": "The end (exclusive) of the span, or not set if unbounded.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet this span is on.",
          "format": "int32",
          "type": "integer"
        },
        "dimension": {
          "description": "The dimension of the span.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ]
        }
      },
      "id": "DimensionRange"
    },
    "CutPasteRequest": {
      "description": "Moves data from the source to the destination.",
      "type": "object",
      "properties": {
        "destination": {
          "description": "The top-left coordinate where the data should be pasted.",
          "$ref": "GridCoordinate"
        },
        "source": {
          "$ref": "GridRange",
          "description": "The source data to cut."
        },
        "pasteType": {
          "description": "What kind of data to paste.  All the source data will be cut, regardless\nof what is pasted.",
          "type": "string",
          "enumDescriptions": [
            "Paste values, formulas, formats, and merges.",
            "Paste the values ONLY without formats, formulas, or merges.",
            "Paste the format and data validation only.",
            "Like PASTE_NORMAL but without borders.",
            "Paste the formulas only.",
            "Paste the data validation only.",
            "Paste the conditional formatting rules only."
          ],
          "enum": [
            "PASTE_NORMAL",
            "PASTE_VALUES",
            "PASTE_FORMAT",
            "PASTE_NO_BORDERS",
            "PASTE_FORMULA",
            "PASTE_DATA_VALIDATION",
            "PASTE_CONDITIONAL_FORMATTING"
          ]
        }
      },
      "id": "CutPasteRequest"
    },
    "BasicChartSeries": {
      "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
      "type": "object",
      "properties": {
        "series": {
          "$ref": "ChartData",
          "description": "The data being visualized in this chart series."
        },
        "type": {
          "enumDescriptions": [
            "Default value, do not use.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/barchart\"\u003ebar chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/linechart\"\u003eline chart\u003c/a\u003e.",
            "An \u003ca href=\"/chart/interactive/docs/gallery/areachart\"\u003earea chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/columnchart\"\u003ecolumn chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/scatterchart\"\u003escatter chart\u003c/a\u003e.",
            "A \u003ca href=\"/chart/interactive/docs/gallery/combochart\"\u003ecombo chart\u003c/a\u003e."
          ],
          "enum": [
            "BASIC_CHART_TYPE_UNSPECIFIED",
            "BAR",
            "LINE",
            "AREA",
            "COLUMN",
            "SCATTER",
            "COMBO"
          ],
          "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
          "type": "string"
        },
        "targetAxis": {
          "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
          "type": "string",
          "enumDescriptions": [
            "Default value, do not use.",
            "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
            "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
            "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
          ],
          "enum": [
            "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
            "BOTTOM_AXIS",
            "LEFT_AXIS",
            "RIGHT_AXIS"
          ]
        }
      },
      "id": "BasicChartSeries"
    },
    "Borders": {
      "description": "The borders of the cell.",
      "type": "object",
      "properties": {
        "top": {
          "$ref": "Border",
          "description": "The top border of the cell."
        },
        "left": {
          "$ref": "Border",
          "description": "The left border of the cell."
        },
        "right": {
          "$ref": "Border",
          "description": "The right border of the cell."
        },
        "bottom": {
          "description": "The bottom border of the cell.",
          "$ref": "Border"
        }
      },
      "id": "Borders"
    },
    "AutoResizeDimensionsRequest": {
      "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "The dimensions to automatically resize.\nOnly COLUMNS are supported.",
          "$ref": "DimensionRange"
        }
      },
      "id": "AutoResizeDimensionsRequest"
    },
    "UpdateBordersRequest": {
      "description": "Updates the borders of a range.\nIf a field is not set in the request, that means the border remains as-is.\nFor example, with two subsequent UpdateBordersRequest:\n\n 1. range: A1:A5 `{ top: RED, bottom: WHITE }`\n 2. range: A1:A5 `{ left: BLUE }`\n\nThat would result in A1:A5 having a borders of\n`{ top: RED, bottom: WHITE, left: BLUE }`.\nIf you want to clear a border, explicitly set the style to\nNONE.",
      "type": "object",
      "properties": {
        "bottom": {
          "$ref": "Border",
          "description": "The border to put at the bottom of the range."
        },
        "innerVertical": {
          "description": "The vertical border to put within the range.",
          "$ref": "Border"
        },
        "right": {
          "description": "The border to put at the right of the range.",
          "$ref": "Border"
        },
        "range": {
          "$ref": "GridRange",
          "description": "The range whose borders should be updated."
        },
        "innerHorizontal": {
          "$ref": "Border",
          "description": "The horizontal border to put within the range."
        },
        "top": {
          "description": "The border to put at the top of the range.",
          "$ref": "Border"
        },
        "left": {
          "description": "The border to put at the left of the range.",
          "$ref": "Border"
        }
      },
      "id": "UpdateBordersRequest"
    },
    "CellFormat": {
      "description": "The format of a cell.",
      "type": "object",
      "properties": {
        "numberFormat": {
          "$ref": "NumberFormat",
          "description": "A format describing how number values should be represented to the user."
        },
        "hyperlinkDisplayType": {
          "description": "How a hyperlink, if it exists, should be displayed in the cell.",
          "type": "string",
          "enumDescriptions": [
            "The default value: the hyperlink is rendered. Do not use this.",
            "A hyperlink should be explicitly rendered.",
            "A hyperlink should not be rendered."
          ],
          "enum": [
            "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
            "LINKED",
            "PLAIN_TEXT"
          ]
        },
        "horizontalAlignment": {
          "description": "The horizontal alignment of the value in the cell.",
          "type": "string",
          "enumDescriptions": [
            "The horizontal alignment is not specified. Do not use this.",
            "The text is explicitly aligned to the left of the cell.",
            "The text is explicitly aligned to the center of the cell.",
            "The text is explicitly aligned to the right of the cell."
          ],
          "enum": [
            "HORIZONTAL_ALIGN_UNSPECIFIED",
            "LEFT",
            "CENTER",
            "RIGHT"
          ]
        },
        "textFormat": {
          "$ref": "TextFormat",
          "description": "The format of the text in the cell (unless overridden by a format run)."
        },
        "backgroundColor": {
          "$ref": "Color",
          "description": "The background color of the cell."
        },
        "padding": {
          "description": "The padding of the cell.",
          "$ref": "Padding"
        },
        "verticalAlignment": {
          "description": "The vertical alignment of the value in the cell.",
          "type": "string",
          "enumDescriptions": [
            "The vertical alignment is not specified.  Do not use this.",
            "The text is explicitly aligned to the top of the cell.",
            "The text is explicitly aligned to the middle of the cell.",
            "The text is explicitly aligned to the bottom of the cell."
          ],
          "enum": [
            "VERTICAL_ALIGN_UNSPECIFIED",
            "TOP",
            "MIDDLE",
            "BOTTOM"
          ]
        },
        "borders": {
          "$ref": "Borders",
          "description": "The borders of the cell."
        },
        "textDirection": {
          "description": "The direction of the text in the cell.",
          "type": "string",
          "enumDescriptions": [
            "The text direction is not specified. Do not use this.",
            "The text direction of left-to-right was set by the user.",
            "The text direction of right-to-left was set by the user."
          ],
          "enum": [
            "TEXT_DIRECTION_UNSPECIFIED",
            "LEFT_TO_RIGHT",
            "RIGHT_TO_LEFT"
          ]
        },
        "wrapStrategy": {
          "description": "The wrap strategy for the value in the cell.",
          "type": "string",
          "enumDescriptions": [
            "The default value, do not use.",
            "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. \u003c- Text continues into next cell\n    | Next newline.   |",
            "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| \u003c- Word is clipped.\n    | word.      |",
            "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| \u003c- Text is clipped\n    | Next newline.   |",
            "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| \u003c- Word is broken.\n    | ong word.  |"
          ],
          "enum": [
            "WRAP_STRATEGY_UNSPECIFIED",
            "OVERFLOW_CELL",
            "LEGACY_WRAP",
            "CLIP",
            "WRAP"
          ]
        },
        "textRotation": {
          "$ref": "TextRotation",
          "description": "The rotation applied to text in a cell"
        }
      },
      "id": "CellFormat"
    },
    "ClearValuesResponse": {
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "clearedRange": {
          "description": "The range (in A1 notation) that was cleared.\n(If the request was for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual range\n that was cleared, bounded to the sheet's limits.)",
          "type": "string"
        }
      },
      "id": "ClearValuesResponse"
    },
    "DeleteConditionalFormatRuleRequest": {
      "description": "Deletes a conditional format rule at the given index.\nAll subsequent rules' indexes are decremented.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The zero-based index of the rule to be deleted.",
          "format": "int32",
          "type": "integer"
        },
        "sheetId": {
          "description": "The sheet the rule is being deleted from.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "DeleteConditionalFormatRuleRequest"
    },
    "AddBandingResponse": {
      "description": "The result of adding a banded range.",
      "type": "object",
      "properties": {
        "bandedRange": {
          "$ref": "BandedRange",
          "description": "The banded range that was added."
        }
      },
      "id": "AddBandingResponse"
    },
    "DeleteNamedRangeRequest": {
      "description": "Removes the named range with the given ID from the spreadsheet.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range to delete.",
          "type": "string"
        }
      },
      "id": "DeleteNamedRangeRequest"
    },
    "ChartData": {
      "description": "The data included in a domain or series.",
      "type": "object",
      "properties": {
        "sourceRange": {
          "description": "The source ranges of the data.",
          "$ref": "ChartSourceRange"
        }
      },
      "id": "ChartData"
    },
    "BatchGetValuesResponse": {
      "description": "The response when retrieving more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "valueRanges": {
          "description": "The requested values. The order of the ValueRanges is the same as the\norder of the requested ranges.",
          "type": "array",
          "items": {
            "$ref": "ValueRange"
          }
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet the data was retrieved from.",
          "type": "string"
        }
      },
      "id": "BatchGetValuesResponse"
    },
    "UpdateBandingRequest": {
      "description": "Updates properties of the supplied banded range.",
      "type": "object",
      "properties": {
        "bandedRange": {
          "$ref": "BandedRange",
          "description": "The banded range to update with the new properties."
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `bandedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateBandingRequest"
    },
    "Color": {
      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well. Here are some examples:\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha \u003c= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i \u003c missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
      "type": "object",
      "properties": {
        "green": {
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        },
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        },
        "alpha": {
          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
          "format": "float",
          "type": "number"
        },
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "format": "float",
          "type": "number"
        }
      },
      "id": "Color"
    },
    "PivotGroup": {
      "description": "A single grouping (either row or column) in a pivot table.",
      "type": "object",
      "properties": {
        "valueBucket": {
          "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
          "$ref": "PivotGroupSortValueBucket"
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
          "format": "int32",
          "type": "integer"
        },
        "showTotals": {
          "description": "True if the pivot table should include the totals for this grouping.",
          "type": "boolean"
        },
        "valueMetadata": {
          "description": "Metadata about values in the grouping.",
          "type": "array",
          "items": {
            "$ref": "PivotGroupValueMetadata"
          }
        },
        "sortOrder": {
          "enumDescriptions": [
            "Default value, do not use this.",
            "Sort ascending.",
            "Sort descending."
          ],
          "enum": [
            "SORT_ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "description": "The order the values in this group should be sorted.",
          "type": "string"
        }
      },
      "id": "PivotGroup"
    },
    "PivotTable": {
      "description": "A pivot table.",
      "type": "object",
      "properties": {
        "criteria": {
          "additionalProperties": {
            "$ref": "PivotFilterCriteria"
          },
          "description": "An optional mapping of filters per source column offset.\n\nThe filters will be applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
          "type": "object"
        },
        "rows": {
          "description": "Each row grouping in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "PivotGroup"
          }
        },
        "valueLayout": {
          "enumDescriptions": [
            "Values are laid out horizontally (as columns).",
            "Values are laid out vertically (as rows)."
          ],
          "enum": [
            "HORIZONTAL",
            "VERTICAL"
          ],
          "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
          "type": "string"
        },
        "source": {
          "description": "The range the pivot table is reading data from.",
          "$ref": "GridRange"
        },
        "columns": {
          "description": "Each column grouping in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "PivotGroup"
          }
        },
        "values": {
          "description": "A list of values to include in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "PivotValue"
          }
        }
      },
      "id": "PivotTable"
    },
    "ChartSourceRange": {
      "description": "Source ranges for a chart.",
      "type": "object",
      "properties": {
        "sources": {
          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be contiguous across the domain and series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
          "type": "array",
          "items": {
            "$ref": "GridRange"
          }
        }
      },
      "id": "ChartSourceRange"
    },
    "ValueRange": {
      "description": "Data within a range of the spreadsheet.",
      "type": "object",
      "properties": {
        "majorDimension": {
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "description": "The major dimension of the values.\n\nFor output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.\n\nFor input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`\nwill set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`\nthen `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.\n\nWhen writing, if this field is not set, it defaults to ROWS.",
          "type": "string"
        },
        "values": {
          "description": "The data that was read or to be written.  This is an array of arrays,\nthe outer array representing all the data and each inner array\nrepresenting a major dimension. Each item in the inner array\ncorresponds with one cell.\n\nFor output, empty trailing rows and columns will not be included.\n\nFor input, supported value types are: bool, string, and double.\nNull values will be skipped.\nTo set a cell to an empty value, set the string value to an empty string.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "any"
            }
          }
        },
        "range": {
          "description": "The range the values cover, in A1 notation.\nFor output, this range indicates the entire requested range,\neven though the values will exclude trailing rows and columns.\nWhen appending values, this field represents the range to search for a\ntable, after which values will be appended.",
          "type": "string"
        }
      },
      "id": "ValueRange"
    },
    "AppendCellsRequest": {
      "description": "Adds new cells after the last row with data in a sheet,\ninserting new rows into the sheet if necessary.",
      "type": "object",
      "properties": {
        "rows": {
          "description": "The data to append.",
          "type": "array",
          "items": {
            "$ref": "RowData"
          }
        },
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "sheetId": {
          "description": "The sheet ID to append the data to.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "AppendCellsRequest"
    },
    "AddBandingRequest": {
      "description": "Adds a new banded range to the spreadsheet.",
      "type": "object",
      "properties": {
        "bandedRange": {
          "description": "The banded range to add. The bandedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
          "$ref": "BandedRange"
        }
      },
      "id": "AddBandingRequest"
    },
    "Response": {
      "description": "A single response from an update.",
      "type": "object",
      "properties": {
        "addSheet": {
          "$ref": "AddSheetResponse",
          "description": "A reply from adding a sheet."
        },
        "updateConditionalFormatRule": {
          "$ref": "UpdateConditionalFormatRuleResponse",
          "description": "A reply from updating a conditional format rule."
        },
        "addNamedRange": {
          "$ref": "AddNamedRangeResponse",
          "description": "A reply from adding a named range."
        },
        "addFilterView": {
          "description": "A reply from adding a filter view.",
          "$ref": "AddFilterViewResponse"
        },
        "addBanding": {
          "$ref": "AddBandingResponse",
          "description": "A reply from adding a banded range."
        },
        "addProtectedRange": {
          "$ref": "AddProtectedRangeResponse",
          "description": "A reply from adding a protected range."
        },
        "duplicateSheet": {
          "description": "A reply from duplicating a sheet.",
          "$ref": "DuplicateSheetResponse"
        },
        "deleteConditionalFormatRule": {
          "$ref": "DeleteConditionalFormatRuleResponse",
          "description": "A reply from deleting a conditional format rule."
        },
        "updateEmbeddedObjectPosition": {
          "$ref": "UpdateEmbeddedObjectPositionResponse",
          "description": "A reply from updating an embedded object's position."
        },
        "duplicateFilterView": {
          "$ref": "DuplicateFilterViewResponse",
          "description": "A reply from duplicating a filter view."
        },
        "addChart": {
          "$ref": "AddChartResponse",
          "description": "A reply from adding a chart."
        },
        "findReplace": {
          "description": "A reply from doing a find/replace.",
          "$ref": "FindReplaceResponse"
        }
      },
      "id": "Response"
    },
    "EmbeddedChart": {
      "description": "A chart embedded in a sheet.",
      "type": "object",
      "properties": {
        "chartId": {
          "description": "The ID of the chart.",
          "format": "int32",
          "type": "integer"
        },
        "position": {
          "$ref": "EmbeddedObjectPosition",
          "description": "The position of the chart."
        },
        "spec": {
          "$ref": "ChartSpec",
          "description": "The specification of the chart."
        }
      },
      "id": "EmbeddedChart"
    },
    "TextFormatRun": {
      "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
      "type": "object",
      "properties": {
        "startIndex": {
          "description": "The character index where this run starts.",
          "format": "int32",
          "type": "integer"
        },
        "format": {
          "$ref": "TextFormat",
          "description": "The format of this run.  Absent values inherit the cell's format."
        }
      },
      "id": "TextFormatRun"
    },
    "InsertRangeRequest": {
      "description": "Inserts cells into a range, shifting the existing cells over or down.",
      "type": "object",
      "properties": {
        "shiftDimension": {
          "enumDescriptions": [
            "The default value, do not use.",
            "Operates on the rows of a sheet.",
            "Operates on the columns of a sheet."
          ],
          "enum": [
            "DIMENSION_UNSPECIFIED",
            "ROWS",
            "COLUMNS"
          ],
          "description": "The dimension which will be shifted when inserting cells.\nIf ROWS, existing cells will be shifted down.\nIf COLUMNS, existing cells will be shifted right.",
          "type": "string"
        },
        "range": {
          "description": "The range to insert new cells into.",
          "$ref": "GridRange"
        }
      },
      "id": "InsertRangeRequest"
    },
    "AddNamedRangeResponse": {
      "description": "The result of adding a named range.",
      "type": "object",
      "properties": {
        "namedRange": {
          "$ref": "NamedRange",
          "description": "The named range to add."
        }
      },
      "id": "AddNamedRangeResponse"
    },
    "RowData": {
      "description": "Data about each cell in a row.",
      "type": "object",
      "properties": {
        "values": {
          "description": "The values in the row, one per column.",
          "type": "array",
          "items": {
            "$ref": "CellData"
          }
        }
      },
      "id": "RowData"
    },
    "Border": {
      "description": "A border along a cell.",
      "type": "object",
      "properties": {
        "width": {
          "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
          "format": "int32",
          "type": "integer"
        },
        "style": {
          "description": "The style of the border.",
          "type": "string",
          "enumDescriptions": [
            "The style is not specified. Do not use this.",
            "The border is dotted.",
            "The border is dashed.",
            "The border is a thin solid line.",
            "The border is a medium solid line.",
            "The border is a thick solid line.",
            "No border.\nUsed only when updating a border in order to erase it.",
            "The border is two solid lines."
          ],
          "enum": [
            "STYLE_UNSPECIFIED",
            "DOTTED",
            "DASHED",
            "SOLID",
            "SOLID_MEDIUM",
            "SOLID_THICK",
            "NONE",
            "DOUBLE"
          ]
        },
        "color": {
          "description": "The color of the border.",
          "$ref": "Color"
        }
      },
      "id": "Border"
    },
    "GridData": {
      "description": "Data in the grid, as well as metadata about the dimensions.",
      "type": "object",
      "properties": {
        "startRow": {
          "description": "The first row this GridData refers to, zero-based.",
          "format": "int32",
          "type": "integer"
        },
        "columnMetadata": {
          "description": "Metadata about the requested columns in the grid, starting with the column\nin start_column.",
          "type": "array",
          "items": {
            "$ref": "DimensionProperties"
          }
        },
        "startColumn": {
          "description": "The first column this GridData refers to, zero-based.",
          "format": "int32",
          "type": "integer"
        },
        "rowMetadata": {
          "description": "Metadata about the requested rows in the grid, starting with the row\nin start_row.",
          "type": "array",
          "items": {
            "$ref": "DimensionProperties"
          }
        },
        "rowData": {
          "description": "The data in the grid, one entry per row,\nstarting with the row in startRow.\nThe values in RowData will correspond to columns starting\nat start_column.",
          "type": "array",
          "items": {
            "$ref": "RowData"
          }
        }
      },
      "id": "GridData"
    }
  },
  "protocol": "rest",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "canonicalName": "Sheets",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/spreadsheets": {
          "description": "View and manage your spreadsheets in Google Drive"
        },
        "https://www.googleapis.com/auth/drive.file": {
          "description": "View and manage Google Drive files and folders that you have opened or created with this app"
        },
        "https://www.googleapis.com/auth/drive": {
          "description": "View and manage the files in your Google Drive"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "View the files in your Google Drive"
        },
        "https://www.googleapis.com/auth/spreadsheets.readonly": {
          "description": "View your Google Spreadsheets"
        }
      }
    }
  },
  "rootUrl": "https://sheets.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "sheets",
  "batchPath": "batch",
  "title": "Google Sheets API",
  "ownerName": "Google",
  "resources": {
    "spreadsheets": {
      "methods": {
        "get": {
          "description": "Returns the spreadsheet at the given ID.\nThe caller must specify the spreadsheet ID.\n\nBy default, data within grids will not be returned.\nYou can include grid data one of two ways:\n\n* Specify a field mask listing your desired fields using the `fields` URL\nparameter in HTTP\n\n* Set the includeGridData\nURL parameter to true.  If a field mask is set, the `includeGridData`\nparameter is ignored\n\nFor large spreadsheets, it is recommended to retrieve only the specific\nfields of the spreadsheet that you want.\n\nTo retrieve only subsets of the spreadsheet, use the\nranges URL parameter.\nMultiple ranges can be specified.  Limiting the range will\nreturn only the portions of the spreadsheet that intersect the requested\nranges. Ranges are specified using A1 notation.",
          "httpMethod": "GET",
          "parameterOrder": [
            "spreadsheetId"
          ],
          "response": {
            "$ref": "Spreadsheet"
          },
          "parameters": {
            "ranges": {
              "location": "query",
              "description": "The ranges to retrieve from the spreadsheet.",
              "type": "string",
              "repeated": true
            },
            "includeGridData": {
              "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request.",
              "type": "boolean",
              "location": "query"
            },
            "spreadsheetId": {
              "location": "path",
              "description": "The spreadsheet to request.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly"
          ],
          "flatPath": "v4/spreadsheets/{spreadsheetId}",
          "id": "sheets.spreadsheets.get",
          "path": "v4/spreadsheets/{spreadsheetId}"
        },
        "create": {
          "request": {
            "$ref": "Spreadsheet"
          },
          "description": "Creates a spreadsheet, returning the newly created spreadsheet.",
          "response": {
            "$ref": "Spreadsheet"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "flatPath": "v4/spreadsheets",
          "path": "v4/spreadsheets",
          "id": "sheets.spreadsheets.create"
        },
        "batchUpdate": {
          "request": {
            "$ref": "BatchUpdateSpreadsheetRequest"
          },
          "description": "Applies one or more updates to the spreadsheet.\n\nEach request is validated before\nbeing applied. If any request is not valid then the entire request will\nfail and nothing will be applied.\n\nSome requests have replies to\ngive you some information about how\nthey are applied. The replies will mirror the requests.  For example,\nif you applied 4 updates and the 3rd one had a reply, then the\nresponse will have 2 empty replies, the actual reply, and another empty\nreply, in that order.\n\nDue to the collaborative nature of spreadsheets, it is not guaranteed that\nthe spreadsheet will reflect exactly your changes after this completes,\nhowever it is guaranteed that the updates in the request will be\napplied together atomically. Your changes may be altered with respect to\ncollaborator changes. If there are no collaborators, the spreadsheet\nshould reflect your changes.",
          "httpMethod": "POST",
          "parameterOrder": [
            "spreadsheetId"
          ],
          "response": {
            "$ref": "BatchUpdateSpreadsheetResponse"
          },
          "parameters": {
            "spreadsheetId": {
              "description": "The spreadsheet to apply the updates to.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/spreadsheets"
          ],
          "flatPath": "v4/spreadsheets/{spreadsheetId}:batchUpdate",
          "id": "sheets.spreadsheets.batchUpdate",
          "path": "v4/spreadsheets/{spreadsheetId}:batchUpdate"
        }
      },
      "resources": {
        "values": {
          "methods": {
            "get": {
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "id": "sheets.spreadsheets.values.get",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "description": "Returns a range of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and a range.",
              "httpMethod": "GET",
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "response": {
                "$ref": "ValueRange"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly"
              ],
              "parameters": {
                "majorDimension": {
                  "location": "query",
                  "enum": [
                    "DIMENSION_UNSPECIFIED",
                    "ROWS",
                    "COLUMNS"
                  ],
                  "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.",
                  "type": "string"
                },
                "spreadsheetId": {
                  "location": "path",
                  "description": "The ID of the spreadsheet to retrieve data from.",
                  "required": true,
                  "type": "string"
                },
                "range": {
                  "description": "The A1 notation of the values to retrieve.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "valueRenderOption": {
                  "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ]
                },
                "dateTimeRenderOption": {
                  "location": "query",
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "type": "string"
                }
              }
            },
            "update": {
              "response": {
                "$ref": "UpdateValuesResponse"
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "httpMethod": "PUT",
              "parameters": {
                "range": {
                  "description": "The A1 notation of the values to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "includeValuesInResponse": {
                  "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values.\nIf the range to write was larger than than the range actually written,\nthe response will include all values in the requested range (excluding\ntrailing empty rows and columns).",
                  "type": "boolean",
                  "location": "query"
                },
                "spreadsheetId": {
                  "location": "path",
                  "description": "The ID of the spreadsheet to update.",
                  "required": true,
                  "type": "string"
                },
                "responseValueRenderOption": {
                  "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ]
                },
                "valueInputOption": {
                  "location": "query",
                  "enum": [
                    "INPUT_VALUE_OPTION_UNSPECIFIED",
                    "RAW",
                    "USER_ENTERED"
                  ],
                  "description": "How the input data should be interpreted.",
                  "type": "string"
                },
                "responseDateTimeRenderOption": {
                  "location": "query",
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}",
              "id": "sheets.spreadsheets.values.update",
              "request": {
                "$ref": "ValueRange"
              },
              "description": "Sets values in a range of a spreadsheet.\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption."
            },
            "batchUpdate": {
              "request": {
                "$ref": "BatchUpdateValuesRequest"
              },
              "description": "Sets values in one or more ranges of a spreadsheet.\nThe caller must specify the spreadsheet ID,\na valueInputOption, and one or more\nValueRanges.",
              "httpMethod": "POST",
              "parameterOrder": [
                "spreadsheetId"
              ],
              "response": {
                "$ref": "BatchUpdateValuesResponse"
              },
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchUpdate",
              "id": "sheets.spreadsheets.values.batchUpdate",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchUpdate"
            },
            "clear": {
              "request": {
                "$ref": "ClearValuesRequest"
              },
              "description": "Clears values from a spreadsheet.\nThe caller must specify the spreadsheet ID and range.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
              "httpMethod": "POST",
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "response": {
                "$ref": "ClearValuesResponse"
              },
              "parameters": {
                "range": {
                  "description": "The A1 notation of the values to clear.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "spreadsheetId": {
                  "location": "path",
                  "description": "The ID of the spreadsheet to update.",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}:clear",
              "id": "sheets.spreadsheets.values.clear",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}:clear"
            },
            "batchGet": {
              "response": {
                "$ref": "BatchGetValuesResponse"
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "httpMethod": "GET",
              "parameters": {
                "ranges": {
                  "description": "The A1 notation of the values to retrieve.",
                  "type": "string",
                  "repeated": true,
                  "location": "query"
                },
                "majorDimension": {
                  "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "DIMENSION_UNSPECIFIED",
                    "ROWS",
                    "COLUMNS"
                  ]
                },
                "spreadsheetId": {
                  "location": "path",
                  "description": "The ID of the spreadsheet to retrieve data from.",
                  "required": true,
                  "type": "string"
                },
                "valueRenderOption": {
                  "location": "query",
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "type": "string"
                },
                "dateTimeRenderOption": {
                  "location": "query",
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ],
                  "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchGet",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchGet",
              "id": "sheets.spreadsheets.values.batchGet",
              "description": "Returns one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges."
            },
            "append": {
              "request": {
                "$ref": "ValueRange"
              },
              "description": "Appends values to a spreadsheet. The input range is used to search for\nexisting data and find a \"table\" within that range. Values will be\nappended to the next row of the table, starting with the first column of\nthe table. See the\n[guide](/sheets/api/guides/values#appending_values)\nand\n[sample code](/sheets/api/samples/writing#append_values)\nfor specific details of how tables are detected and data is appended.\n\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption.  The `valueInputOption` only\ncontrols how the input data will be added to the sheet (column-wise or\nrow-wise), it does not influence what cell the data starts being written\nto.",
              "response": {
                "$ref": "AppendValuesResponse"
              },
              "parameterOrder": [
                "spreadsheetId",
                "range"
              ],
              "httpMethod": "POST",
              "parameters": {
                "spreadsheetId": {
                  "location": "path",
                  "description": "The ID of the spreadsheet to update.",
                  "required": true,
                  "type": "string"
                },
                "responseValueRenderOption": {
                  "location": "query",
                  "enum": [
                    "FORMATTED_VALUE",
                    "UNFORMATTED_VALUE",
                    "FORMULA"
                  ],
                  "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
                  "type": "string"
                },
                "insertDataOption": {
                  "description": "How the input data should be inserted.",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "OVERWRITE",
                    "INSERT_ROWS"
                  ]
                },
                "valueInputOption": {
                  "location": "query",
                  "enum": [
                    "INPUT_VALUE_OPTION_UNSPECIFIED",
                    "RAW",
                    "USER_ENTERED"
                  ],
                  "description": "How the input data should be interpreted.",
                  "type": "string"
                },
                "responseDateTimeRenderOption": {
                  "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "SERIAL_NUMBER",
                    "FORMATTED_STRING"
                  ]
                },
                "range": {
                  "location": "path",
                  "description": "The A1 notation of a range to search for a logical table of data.\nValues will be appended after the last row of the table.",
                  "required": true,
                  "type": "string"
                },
                "includeValuesInResponse": {
                  "description": "Determines if the update response should include the values\nof the cells that were appended. By default, responses\ndo not include the updated values.",
                  "type": "boolean",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}:append",
              "path": "v4/spreadsheets/{spreadsheetId}/values/{range}:append",
              "id": "sheets.spreadsheets.values.append"
            },
            "batchClear": {
              "response": {
                "$ref": "BatchClearValuesResponse"
              },
              "parameterOrder": [
                "spreadsheetId"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "parameters": {
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchClear",
              "path": "v4/spreadsheets/{spreadsheetId}/values:batchClear",
              "id": "sheets.spreadsheets.values.batchClear",
              "description": "Clears one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
              "request": {
                "$ref": "BatchClearValuesRequest"
              }
            }
          }
        },
        "sheets": {
          "methods": {
            "copyTo": {
              "request": {
                "$ref": "CopySheetToAnotherSpreadsheetRequest"
              },
              "description": "Copies a single sheet from a spreadsheet to another spreadsheet.\nReturns the properties of the newly created sheet.",
              "httpMethod": "POST",
              "parameterOrder": [
                "spreadsheetId",
                "sheetId"
              ],
              "response": {
                "$ref": "SheetProperties"
              },
              "parameters": {
                "sheetId": {
                  "description": "The ID of the sheet to copy.",
                  "format": "int32",
                  "required": true,
                  "type": "integer",
                  "location": "path"
                },
                "spreadsheetId": {
                  "description": "The ID of the spreadsheet containing the sheet to copy.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets"
              ],
              "flatPath": "v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo",
              "id": "sheets.spreadsheets.sheets.copyTo",
              "path": "v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "pp": {
      "description": "Pretty-print response.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    }
  },
  "version": "v4",
  "baseUrl": "https://sheets.googleapis.com/",
  "servicePath": "",
  "description": "Reads and writes Google Sheets.",
  "kind": "discovery#restDescription",
  "basePath": "",
  "id": "sheets:v4",
  "documentationLink": "https://developers.google.com/sheets/",
  "revision": "20170428",
  "discoveryVersion": "v1"
}
