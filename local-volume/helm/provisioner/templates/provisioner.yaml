apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.common.configMapName }}
  namespace: {{ .Values.common.namespace }}
data:
{{- if .Values.daemonset.nodeLabels }}
  nodeLabelsForPV: |
   {{- range $label := .Values.daemonset.nodeLabels }}
    - {{$label}}
   {{- end }}
{{- end }}
{{- if .Values.common.useAlphaAPI }}
  useAlphaAPI: "true"
{{- end }}
{{- if .Values.common.useJobForCleaning }}
  useJobForCleaning: "yes"
{{- end}}
{{- if .Values.common.minResyncPeriod }}
  minResyncPeriod: {{ .Values.common.minResyncPeriod | quote }}
{{- end}}
  storageClassMap: |
    {{- range $classConfig := .Values.classes }}
    {{ $classConfig.name }}:
       hostDir: {{ $classConfig.hostDir }}
       mountDir: {{ if $classConfig.mountDir }} {{- $classConfig.mountDir -}} {{ else }} {{- $classConfig.hostDir -}} {{ end }}
       {{- if $classConfig.blockCleanerCommand }}
       blockCleanerCommand:
       {{- range $val := $classConfig.blockCleanerCommand }}
         - "{{ $val -}}"{{- end}}
       {{- end }}
    {{- end }}
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ .Values.daemonset.name }}
  namespace: {{ .Values.common.namespace }}
  labels:
    app: local-volume-provisioner
spec:
  selector:
    matchLabels:
      app: local-volume-provisioner
  template:
    metadata:
      labels:
        app: local-volume-provisioner
    spec:
      serviceAccountName: {{.Values.daemonset.serviceAccount}}
      containers:
        - image: "{{ .Values.daemonset.image }}"
          {{- if .Values.daemonset.imagePullPolicy }}
          imagePullPolicy: {{ .Values.daemonset.imagePullPolicy | quote }}
          {{- end }}
          name: provisioner
          securityContext:
            privileged: true
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JOB_CONTAINER_IMAGE
            value: "{{ .Values.daemonset.image }}"
          {{- if .Values.daemonset.kubeConfigEnv }}
            - name: KUBECONFIG
              value: {{.Values.daemonset.kubeConfigEnv}}
          {{- end }}
          volumeMounts:
            - mountPath: /etc/provisioner/config
              name: provisioner-config
              readOnly: true
            - mountPath: /dev
              name: provisioner-dev
            {{- range $classConfig := .Values.classes }}
            - mountPath: {{ if $classConfig.mountDir }} {{- $classConfig.mountDir -}} {{ else }} {{- $classConfig.hostDir -}} {{ end }}
              name: {{ $classConfig.name }}
              mountPropagation: "HostToContainer"
            {{- end }}
      volumes:
        - name: provisioner-config
          configMap:
            name: {{ .Values.common.configMapName }}
        - name: provisioner-dev
          hostPath:
            path: /dev
        {{- range $classConfig := .Values.classes }}
        - name: {{ $classConfig.name }}
          hostPath:
            path: {{ $classConfig.hostDir }}
        {{- end }}
{{- range $val := .Values.classes }}
{{- if $val.storageClass }}
{{- $reclaimPolicy := $val.reclaimPolicy | default "Delete" }}
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ $val.name }}
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: {{ $reclaimPolicy }}
{{- end }}
{{- end }}
